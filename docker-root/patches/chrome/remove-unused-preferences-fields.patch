# Remove unused Safe Browsing and Sign-in fields from Preferences file
# TODO: This patch should probably be split up and merged into
# disable-signin.patch and fix-building-without-safebrowsing.patch

--- a/android_webview/browser/aw_browser_context.cc
+++ b/android_webview/browser/aw_browser_context.cc
@@ -43,7 +43,6 @@
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/pref_service.h"
 #include "components/prefs/pref_service_factory.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/url_formatter/url_fixer.h"
 #include "components/user_prefs/user_prefs.h"
 #include "components/variations/net/variations_http_headers.h"
@@ -438,8 +437,6 @@ void AwBrowserContext::RebuildTable(
 }
 
 void AwBrowserContext::SetExtendedReportingAllowed(bool allowed) {
-  user_pref_service_->SetBoolean(
-      ::prefs::kSafeBrowsingExtendedReportingOptInAllowed, allowed);
 }
 
 // TODO(amalova): Make sure NetworkContext is configured correctly when
--- a/chrome/app/settings_strings.grdp
+++ b/chrome/app/settings_strings.grdp
@@ -2994,18 +2994,6 @@
   <message name="IDS_SETTINGS_NETWORK_PREDICTION_ENABLED_DESC" desc="In the advanced options tab, the secondary text next to the checkbox that enables prediction of network actions.">
     Uses cookies to remember your preferences, even if you donâ€™t visit those pages
   </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENABLEPROTECTION" desc="The section title of 'Protects you and your device from dangerous sites'">
-    Safe Browsing (protects you and your device from dangerous sites)
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENABLEPROTECTION_DESC" desc="Checkbox label: should Chrome protect user and user's device from dangerous sites">
-    Sends URLs of some pages you visit to Google, when your security is at risk
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENABLE_REPORTING" desc="The section title of the extended safe browsing checkbox to help improve safe browsing">
-    Help improve Chrome security
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENABLE_REPORTING_DESC" desc="Description for extended safe browsing">
-    To detect dangerous apps and sites, Chrome sends URLs of some pages you visit, limited system information, and some page content to Google
-  </message>
   <message name="IDS_SETTINGS_SPELLING_PREF" desc="The documentation string of the 'Use Spelling' preference">
     Enhanced spell check
   </message>
--- a/chrome/browser/android/preferences/prefs.h
+++ b/chrome/browser/android/preferences/prefs.h
@@ -20,7 +20,6 @@
 #include "components/offline_pages/core/prefetch/prefetch_prefs.h"
 #include "components/password_manager/core/common/password_manager_pref_names.h"
 #include "components/payments/core/payment_prefs.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/signin/public/base/signin_pref_names.h"
 #include "components/translate/core/browser/translate_pref_names.h"
 
@@ -93,8 +92,6 @@ const char* const kPrefsExposedToJava[] 
     autofill::prefs::kAutofillCreditCardEnabled,
     prefs::kUsageStatsEnabled,
     offline_pages::prefetch_prefs::kUserSettingEnabled,
-    prefs::kSafeBrowsingExtendedReportingOptInAllowed,
-    prefs::kSafeBrowsingEnabled,
     password_manager::prefs::kPasswordManagerOnboardingState,
     prefs::kSearchSuggestEnabled,
     password_manager::prefs::kCredentialsEnableService,
--- a/chrome/browser/android/signin/signin_manager_android.cc
+++ b/chrome/browser/android/signin/signin_manager_android.cc
@@ -13,7 +13,6 @@
 #include "chrome/android/chrome_jni_headers/SigninManager_jni.h"
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "google_apis/gaia/gaia_auth_util.h"
 
 #include "base/android/callback_android.h"
@@ -29,7 +28,6 @@
 #include "components/policy/core/browser/browser_policy_connector.h"
 #include "components/policy/core/common/cloud/user_cloud_policy_manager.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "content/public/browser/browsing_data_filter_builder.h"
 #include "content/public/browser/browsing_data_remover.h"
@@ -89,8 +87,6 @@ class ProfileDataRemover : public conten
       // All the Profile data has been wiped. Clear the last signed in username
       // as well, so that the next signin doesn't trigger the account
       // change dialog.
-      profile_->GetPrefs()->ClearPref(prefs::kGoogleServicesLastAccountId);
-      profile_->GetPrefs()->ClearPref(prefs::kGoogleServicesLastUsername);
     }
 
     origin_runner_->PostTask(FROM_HERE, std::move(callback_));
@@ -128,11 +124,6 @@ SigninManagerAndroid::SigninManagerAndro
   DCHECK(user_cloud_policy_manager_);
   DCHECK(user_policy_signin_service_);
 
-  signin_allowed_.Init(
-      prefs::kSigninAllowed, profile_->GetPrefs(),
-      base::Bind(&SigninManagerAndroid::OnSigninAllowedPrefChanged,
-                 base::Unretained(this)));
-
   force_browser_signin_.Init(prefs::kForceBrowserSignin,
                              g_browser_process->local_state());
 
@@ -156,7 +147,7 @@ void SigninManagerAndroid::Shutdown() {
 }
 
 bool SigninManagerAndroid::IsSigninAllowed() const {
-  return signin_allowed_.GetValue();
+  return false;
 }
 
 jboolean SigninManagerAndroid::IsSigninAllowedByPolicy(JNIEnv* env) const {
--- a/chrome/browser/android/signin/signin_manager_android.h
+++ b/chrome/browser/android/signin/signin_manager_android.h
@@ -113,9 +113,6 @@ class SigninManagerAndroid : public Keye
 
   Profile* const profile_ = nullptr;
 
-  // Handler for prefs::kSigninAllowed set in user's profile.
-  BooleanPrefMember signin_allowed_;
-
   // Handler for prefs::kForceBrowserSignin. This preference is set in Local
   // State, not in user prefs.
   BooleanPrefMember force_browser_signin_;
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -233,14 +233,12 @@
 #include "components/safe_browsing/browser/browser_url_loader_throttle.h"
 #include "components/safe_browsing/browser/url_checker_delegate.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/db/database_manager.h"
 #include "components/safe_browsing/features.h"
 #include "components/safe_browsing/password_protection/password_protection_navigation_throttle.h"
 #include "components/security_interstitials/content/origin_policy_ui.h"
 #include "components/security_interstitials/content/ssl_cert_reporter.h"
 #include "components/security_interstitials/content/ssl_error_navigation_throttle.h"
-#include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/subresource_filter/content/browser/content_subresource_filter_throttle_manager.h"
 #include "components/translate/core/common/translate_switches.h"
 #include "components/url_formatter/url_fixer.h"
@@ -2069,13 +2067,9 @@ void ChromeContentBrowserClient::AppendE
         }
       }
 
-      // Disable client-side phishing detection in the renderer if it is
-      // disabled in the Profile preferences or the browser process.
-      if (!prefs->GetBoolean(prefs::kSafeBrowsingEnabled) ||
-          true) {
-        command_line->AppendSwitch(
-            switches::kDisableClientSidePhishingDetection);
-      }
+      // Disable client-side phishing detection in the renderer
+      command_line->AppendSwitch(
+          switches::kDisableClientSidePhishingDetection);
 
       if (prefs->GetBoolean(prefs::kPrintPreviewDisabled))
         command_line->AppendSwitch(switches::kDisablePrintPreview);
@@ -4257,7 +4251,7 @@ ChromeContentBrowserClient::CreateURLLoa
 
   signin::IdentityManager* identity_manager =
       IdentityManagerFactory::GetForProfile(profile);
-  bool is_signed_in = identity_manager && identity_manager->HasPrimaryAccount();
+  bool is_signed_in = false;
 
   chrome::mojom::DynamicParams dynamic_params = {
       profile->GetPrefs()->GetBoolean(prefs::kForceGoogleSafeSearch),
--- a/chrome/browser/chromeos/lock_screen_apps/lock_screen_profile_creator_impl.cc
+++ b/chrome/browser/chromeos/lock_screen_apps/lock_screen_profile_creator_impl.cc
@@ -18,7 +18,6 @@
 #include "chrome/browser/profiles/profile_manager.h"
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "extensions/browser/extension_system.h"
 
 namespace lock_screen_apps {
@@ -92,7 +91,6 @@ void LockScreenProfileCreatorImpl::OnPro
     // SafeBrowsingService when the user has safe browsing disabled (reasoning
     // similar to http://crbug.com/461493).
     // TODO(tbarzic): Revisit this if webviews get enabled for lock screen apps.
-    profile->GetPrefs()->SetBoolean(prefs::kSafeBrowsingEnabled, false);
     return;
   }
 
--- a/chrome/browser/chromeos/lock_screen_apps/lock_screen_profile_creator_impl_unittest.cc
+++ b/chrome/browser/chromeos/lock_screen_apps/lock_screen_profile_creator_impl_unittest.cc
@@ -33,7 +33,6 @@
 #include "components/arc/session/arc_session.h"
 #include "components/crx_file/id_util.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "content/public/test/browser_task_environment.h"
 #include "extensions/common/extension.h"
 #include "extensions/common/extension_builder.h"
--- a/chrome/browser/chromeos/login/signin/device_id_browsertest.cc
+++ b/chrome/browser/chromeos/login/signin/device_id_browsertest.cc
@@ -22,7 +22,6 @@
 #include "chrome/test/base/in_process_browser_test.h"
 #include "chromeos/constants/chromeos_switches.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/user_manager/known_user.h"
 #include "components/user_manager/remove_user_delegate.h"
 #include "components/user_manager/user_manager.h"
@@ -255,15 +254,6 @@ IN_PROC_BROWSER_TEST_F(DeviceIDTest, PRE
   SignInOnline(FakeGaiaMixin::kFakeUserEmail, FakeGaiaMixin::kFakeUserPassword,
                kRefreshToken1, FakeGaiaMixin::kFakeUserGaiaId);
 
-  // Simulate user that has device ID saved only in preferences (pre-M44).
-  PrefService* prefs =
-      ProfileHelper::Get()
-          ->GetProfileByUser(user_manager::UserManager::Get()->GetActiveUser())
-          ->GetPrefs();
-  prefs->SetString(
-      prefs::kGoogleServicesSigninScopedDeviceId,
-      GetDeviceId(AccountId::FromUserEmail(FakeGaiaMixin::kFakeUserEmail)));
-
   // Can't use SetKnownUserDeviceId here, because it forbids changing a device
   // ID.
   user_manager::known_user::SetStringPref(
@@ -288,13 +278,6 @@ IN_PROC_BROWSER_TEST_F(DeviceIDTest, PRE
   SignInOnline(FakeGaiaMixin::kFakeUserEmail, FakeGaiaMixin::kFakeUserPassword,
                kRefreshToken1, FakeGaiaMixin::kFakeUserGaiaId);
 
-  PrefService* prefs =
-      ProfileHelper::Get()
-          ->GetProfileByUser(user_manager::UserManager::Get()->GetActiveUser())
-          ->GetPrefs();
-  EXPECT_TRUE(
-      prefs->GetString(prefs::kGoogleServicesSigninScopedDeviceId).empty());
-
   // Can't use SetKnownUserDeviceId here, because it forbids changing a device
   // ID.
   user_manager::known_user::SetStringPref(
--- a/chrome/browser/chromeos/policy/secondary_google_account_signin_policy_handler.cc
+++ b/chrome/browser/chromeos/policy/secondary_google_account_signin_policy_handler.cc
@@ -7,7 +7,6 @@
 #include "components/policy/core/common/policy_map.h"
 #include "components/policy/policy_constants.h"
 #include "components/prefs/pref_value_map.h"
-#include "components/signin/public/base/signin_pref_names.h"
 
 namespace policy {
 
--- a/chrome/browser/chromeos/policy/secondary_google_account_signin_policy_handler_unittest.cc
+++ b/chrome/browser/chromeos/policy/secondary_google_account_signin_policy_handler_unittest.cc
@@ -13,7 +13,6 @@
 #include "components/policy/core/common/policy_pref_names.h"
 #include "components/policy/policy_constants.h"
 #include "components/prefs/pref_value_map.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
 namespace policy {
--- a/chrome/browser/download/download_browsertest.cc
+++ b/chrome/browser/download/download_browsertest.cc
@@ -97,7 +97,6 @@
 #include "components/infobars/core/infobar.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/proto/csd.pb.h"
 #include "components/safe_browsing/safe_browsing_service_interface.h"
 #include "components/security_state/core/features.h"
--- a/chrome/browser/extensions/api/identity/identity_apitest.cc
+++ b/chrome/browser/extensions/api/identity/identity_apitest.cc
@@ -47,7 +47,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/signin/core/browser/account_reconcilor.h"
 #include "components/signin/public/base/list_accounts_test_utils.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/accounts_mutator.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/identity_test_utils.h"
--- a/chrome/browser/extensions/api/identity/identity_get_auth_token_function.cc
+++ b/chrome/browser/extensions/api/identity/identity_get_auth_token_function.cc
@@ -24,7 +24,6 @@
 #include "chrome/browser/ui/webui/signin/login_ui_service_factory.h"
 #include "chrome/common/extensions/api/identity.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/access_token_info.h"
 #include "components/signin/public/identity_manager/accounts_in_cookie_jar_info.h"
 #include "content/public/browser/browser_task_traits.h"
@@ -62,7 +61,7 @@ const char* const kExtensionsIdentityAPI
     "extensions_identity_api";
 
 bool IsBrowserSigninAllowed(Profile* profile) {
-  return profile->GetPrefs()->GetBoolean(prefs::kSigninAllowed);
+  return false;
 }
 
 }  // namespace
--- a/chrome/browser/extensions/api/preference/preference_api.cc
+++ b/chrome/browser/extensions/api/preference/preference_api.cc
@@ -30,7 +30,6 @@
 #include "components/password_manager/core/common/password_manager_pref_names.h"
 #include "components/prefs/pref_service.h"
 #include "components/proxy_config/proxy_config_pref_names.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/spellcheck/browser/pref_names.h"
 #include "components/translate/core/browser/translate_pref_names.h"
 #include "extensions/browser/extension_pref_value_map.h"
@@ -111,11 +110,6 @@ const PrefMappingEntry kPrefMapping[] = 
      APIPermission::kPrivacy},
     {"doNotTrackEnabled", prefs::kEnableDoNotTrack, APIPermission::kPrivacy,
      APIPermission::kPrivacy},
-    {"safeBrowsingEnabled", prefs::kSafeBrowsingEnabled,
-     APIPermission::kPrivacy, APIPermission::kPrivacy},
-    {"safeBrowsingExtendedReportingEnabled",
-     prefs::kSafeBrowsingScoutReportingEnabled, APIPermission::kPrivacy,
-     APIPermission::kPrivacy},
     {"searchSuggestEnabled", prefs::kSearchSuggestEnabled,
      APIPermission::kPrivacy, APIPermission::kPrivacy},
     {"spellingServiceEnabled", spellcheck::prefs::kSpellCheckUseSpellingService,
--- a/chrome/browser/extensions/api/preference/preference_apitest.cc
+++ b/chrome/browser/extensions/api/preference/preference_apitest.cc
@@ -26,7 +26,6 @@
 #include "components/keep_alive_registry/scoped_keep_alive.h"
 #include "components/password_manager/core/common/password_manager_pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/translate/core/browser/translate_pref_names.h"
 #include "content/public/browser/notification_service.h"
 #include "extensions/browser/extension_registry.h"
@@ -58,7 +57,6 @@ class ExtensionPreferenceApiTest : publi
               prefs->GetInteger(prefs::kNetworkPredictionOptions));
     EXPECT_TRUE(
         prefs->GetBoolean(password_manager::prefs::kCredentialsEnableService));
-    EXPECT_TRUE(prefs->GetBoolean(prefs::kSafeBrowsingEnabled));
     EXPECT_TRUE(prefs->GetBoolean(prefs::kSearchSuggestEnabled));
   }
 
@@ -82,7 +80,6 @@ class ExtensionPreferenceApiTest : publi
               prefs->GetInteger(prefs::kNetworkPredictionOptions));
     EXPECT_FALSE(
         prefs->GetBoolean(password_manager::prefs::kCredentialsEnableService));
-    EXPECT_FALSE(prefs->GetBoolean(prefs::kSafeBrowsingEnabled));
     EXPECT_FALSE(prefs->GetBoolean(prefs::kSearchSuggestEnabled));
   }
 
@@ -134,7 +131,6 @@ IN_PROC_BROWSER_TEST_F(ExtensionPreferen
   prefs->SetInteger(prefs::kNetworkPredictionOptions,
                     chrome_browser_net::NETWORK_PREDICTION_NEVER);
   prefs->SetBoolean(password_manager::prefs::kCredentialsEnableService, false);
-  prefs->SetBoolean(prefs::kSafeBrowsingEnabled, false);
   prefs->SetBoolean(prefs::kSearchSuggestEnabled, false);
   prefs->SetBoolean(prefs::kWebRTCMultipleRoutesEnabled, false);
   prefs->SetBoolean(prefs::kWebRTCNonProxiedUdpEnabled, false);
--- a/chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router.cc
+++ b/chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router.cc
@@ -43,7 +43,6 @@
 #include "components/policy/core/common/cloud/machine_level_user_cloud_policy_manager.h"
 #include "components/policy/core/common/cloud/realtime_reporting_job_configuration.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/proto/webprotect.pb.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #if defined(OS_CHROMEOS)
@@ -123,12 +122,6 @@ SafeBrowsingPrivateEventRouter::SafeBrow
   // in tests.
   if (g_browser_process && g_browser_process->local_state()) {
     RealtimeReportingPrefChanged(std::string());
-    registrar_.Init(g_browser_process->local_state());
-    registrar_.Add(
-        prefs::kUnsafeEventsReportingEnabled,
-        base::BindRepeating(
-            &SafeBrowsingPrivateEventRouter::RealtimeReportingPrefChanged,
-            base::Unretained(this)));
   }
 }
 
@@ -610,9 +603,6 @@ void SafeBrowsingPrivateEventRouter::Ini
   }
 
   if (g_browser_process) {
-    binary_upload_service_ =
-        g_browser_process->safe_browsing_service()->GetBinaryUploadService(
-            Profile::FromBrowserContext(context_));
     IfAuthorized(base::BindOnce(
         &SafeBrowsingPrivateEventRouter::InitRealtimeReportingClientCallback,
         weak_ptr_factory_.GetWeakPtr(), device_management_service));
@@ -707,9 +697,7 @@ void SafeBrowsingPrivateEventRouter::OnC
 bool SafeBrowsingPrivateEventRouter::IsRealtimeReportingEnabled() {
   // g_browser_process and/or g_browser_process->local_state() may be null
   // in tests.
-  return g_browser_process && g_browser_process->local_state() &&
-         g_browser_process->local_state()->GetBoolean(
-             prefs::kUnsafeEventsReportingEnabled);
+  return false;
 }
 
 void SafeBrowsingPrivateEventRouter::RealtimeReportingPrefChanged(
@@ -721,9 +709,6 @@ void SafeBrowsingPrivateEventRouter::Rea
 
 void SafeBrowsingPrivateEventRouter::IfAuthorized(
     base::OnceCallback<void(bool)> cont) {
-  if (binary_upload_service_) {
-    binary_upload_service_->IsAuthorized(std::move(cont));
-  }
 }
 
 void SafeBrowsingPrivateEventRouter::ReportRealtimeEvent(
--- a/chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router.h
+++ b/chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router.h
@@ -14,7 +14,6 @@
 #include "base/memory/weak_ptr.h"
 #include "base/values.h"
 #include "components/keyed_service/core/keyed_service.h"
-#include "components/prefs/pref_change_registrar.h"
 
 namespace content {
 class BrowserContext;
@@ -249,7 +248,6 @@ class SafeBrowsingPrivateEventRouter : p
   // The |private_client_| is used on platforms where we cannot just get a
   // client and we create our own (used through |client_|).
   std::unique_ptr<policy::CloudPolicyClient> private_client_;
-  PrefChangeRegistrar registrar_;
 
   base::WeakPtrFactory<SafeBrowsingPrivateEventRouter> weak_ptr_factory_{this};
   DISALLOW_COPY_AND_ASSIGN(SafeBrowsingPrivateEventRouter);
--- a/chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router_unittest.cc
+++ b/chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router_unittest.cc
@@ -21,7 +21,6 @@
 #include "chrome/test/base/testing_profile_manager.h"
 #include "components/policy/core/common/cloud/mock_cloud_policy_client.h"
 #include "components/policy/core/common/cloud/realtime_reporting_job_configuration.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "content/public/test/browser_task_environment.h"
 #include "extensions/browser/test_event_router.h"
 #include "testing/gmock/include/gmock/gmock.h"
--- a/chrome/browser/extensions/api/settings_private/prefs_util.cc
+++ b/chrome/browser/extensions/api/settings_private/prefs_util.cc
@@ -28,7 +28,6 @@
 #include "components/payments/core/payment_prefs.h"
 #include "components/prefs/pref_service.h"
 #include "components/proxy_config/proxy_config_pref_names.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/search_engines/default_search_manager.h"
 #include "components/spellcheck/browser/pref_names.h"
 #include "components/translate/core/browser/translate_pref_names.h"
@@ -243,10 +242,6 @@ const PrefsUtil::TypedPrefMap& PrefsUtil
       settings_api::PrefType::PREF_TYPE_BOOLEAN;
 
   // Sync and personalization page.
-  (*s_whitelist)[::prefs::kSafeBrowsingEnabled] =
-      settings_api::PrefType::PREF_TYPE_BOOLEAN;
-  (*s_whitelist)[::prefs::kSafeBrowsingScoutReportingEnabled] =
-      settings_api::PrefType::PREF_TYPE_BOOLEAN;
   (*s_whitelist)[::prefs::kSearchSuggestEnabled] =
       settings_api::PrefType::PREF_TYPE_BOOLEAN;
   (*s_whitelist)
--- a/chrome/browser/extensions/api/webstore_private/webstore_private_apitest.cc
+++ b/chrome/browser/extensions/api/webstore_private/webstore_private_apitest.cc
@@ -539,9 +539,6 @@ IN_PROC_BROWSER_TEST_F(ExtensionWebstore
 IN_PROC_BROWSER_TEST_F(ExtensionWebstorePrivateGetReferrerChainApiTest,
                        GetReferrerChainForNonSafeBrowsingUser) {
   PrefService* pref_service = browser()->profile()->GetPrefs();
-  EXPECT_TRUE(pref_service->GetBoolean(prefs::kSafeBrowsingEnabled));
-  // Disable SafeBrowsing.
-  pref_service->SetBoolean(prefs::kSafeBrowsingEnabled, false);
 
   GURL page_url = GetTestServerURLWithReferrers("empty_referrer_chain.html");
   ASSERT_TRUE(RunPageTest(page_url.spec()));
--- a/chrome/browser/net/trial_comparison_cert_verifier_browsertest.cc
+++ b/chrome/browser/net/trial_comparison_cert_verifier_browsertest.cc
@@ -12,7 +12,6 @@
 #include "chrome/common/chrome_features.h"
 #include "chrome/test/base/in_process_browser_test.h"
 #include "chrome/test/base/ui_test_utils.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "net/base/features.h"
 #include "net/cert/trial_comparison_cert_verifier.h"
 #include "net/net_buildflags.h"
--- a/chrome/browser/net/trial_comparison_cert_verifier_controller.cc
+++ b/chrome/browser/net/trial_comparison_cert_verifier_controller.cc
@@ -20,7 +20,6 @@
 #include "chrome/browser/safe_browsing/certificate_reporting_service_factory.h"
 #include "chrome/common/channel_info.h"
 #include "chrome/common/chrome_features.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/certificate_error_report.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
@@ -43,12 +42,6 @@ TrialComparisonCertVerifierController::T
     // enabled.
     return;
   }
-
-  pref_change_registrar_.Init(profile_->GetPrefs());
-  pref_change_registrar_.Add(
-      prefs::kSafeBrowsingScoutReportingEnabled,
-      base::BindRepeating(&TrialComparisonCertVerifierController::RefreshState,
-                          base::Unretained(this)));
 }
 
 TrialComparisonCertVerifierController::
@@ -94,9 +87,7 @@ bool TrialComparisonCertVerifierControll
   if (!MaybeAllowedForProfile(profile_))
     return false;
 
-  const PrefService& prefs = *profile_->GetPrefs();
-
-  return safe_browsing::IsExtendedReportingEnabled(prefs);
+  return false;
 }
 
 void TrialComparisonCertVerifierController::SendTrialReport(
--- a/chrome/browser/net/trial_comparison_cert_verifier_controller.h
+++ b/chrome/browser/net/trial_comparison_cert_verifier_controller.h
@@ -14,7 +14,6 @@
 #include "base/memory/ref_counted.h"
 #include "base/memory/weak_ptr.h"
 #include "base/threading/thread_checker.h"
-#include "components/prefs/pref_change_registrar.h"
 #include "mojo/public/cpp/bindings/pending_receiver.h"
 #include "mojo/public/cpp/bindings/pending_remote.h"
 #include "mojo/public/cpp/bindings/receiver_set.h"
@@ -68,7 +67,6 @@ class TrialComparisonCertVerifierControl
   void RefreshState();
 
   Profile* profile_;
-  PrefChangeRegistrar pref_change_registrar_;
 
   mojo::ReceiverSet<network::mojom::TrialComparisonCertVerifierReportClient>
       receiver_set_;
--- a/chrome/browser/net/trial_comparison_cert_verifier_controller_unittest.cc
+++ b/chrome/browser/net/trial_comparison_cert_verifier_controller_unittest.cc
@@ -21,7 +21,6 @@
 #include "chrome/test/base/testing_browser_process.h"
 #include "chrome/test/base/testing_profile.h"
 #include "chrome/test/base/testing_profile_manager.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/cert_logger.pb.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
 #include "content/public/browser/browser_task_traits.h"
--- a/chrome/browser/password_manager/password_store_factory.cc
+++ b/chrome/browser/password_manager/password_store_factory.cc
@@ -180,14 +180,6 @@ PasswordStoreFactory::BuildServiceInstan
   UpdateOnboardingState(ps, profile->GetPrefs(),
                         base::TimeDelta::FromSeconds(20));
 
-#if defined(OS_WIN) || defined(OS_MACOSX) || \
-    (defined(OS_LINUX) && !defined(OS_CHROMEOS))
-  std::unique_ptr<password_manager::PasswordStoreSigninNotifier> notifier =
-      std::make_unique<password_manager::PasswordStoreSigninNotifierImpl>(
-          IdentityManagerFactory::GetForProfile(profile));
-  ps->SetPasswordStoreSigninNotifier(std::move(notifier));
-#endif
-
   return ps;
 }
 
--- a/chrome/browser/policy/browser_signin_policy_handler.cc
+++ b/chrome/browser/policy/browser_signin_policy_handler.cc
@@ -13,7 +13,6 @@
 #include "components/policy/core/common/policy_map.h"
 #include "components/policy/policy_constants.h"
 #include "components/prefs/pref_value_map.h"
-#include "components/signin/public/base/signin_pref_names.h"
 
 namespace policy {
 BrowserSigninPolicyHandler::BrowserSigninPolicyHandler(Schema chrome_schema)
@@ -41,32 +40,9 @@ void BrowserSigninPolicyHandler::ApplyPo
       case BrowserSigninMode::kForced:
 #if !defined(OS_LINUX)
         prefs->SetValue(prefs::kForceBrowserSignin, base::Value(true));
-#endif
-        FALLTHROUGH;
-      case BrowserSigninMode::kEnabled:
-        prefs->SetValue(
-#if defined(OS_ANDROID)
-            // The new kSigninAllowedOnNextStartup pref is only used on Desktop.
-            // Keep the old kSigninAllowed pref for Android until the policy is
-            // fully deprecated in M71 and can be removed.
-            prefs::kSigninAllowed,
-#else
-            prefs::kSigninAllowedOnNextStartup,
-#endif
-            base::Value(true));
-        break;
-      case BrowserSigninMode::kDisabled:
-        prefs->SetValue(
-#if defined(OS_ANDROID)
-            // The new kSigninAllowedOnNextStartup pref is only used on Desktop.
-            // Keep the old kSigninAllowed pref for Android until the policy is
-            // fully deprecated in M71 and can be removed.
-            prefs::kSigninAllowed,
 #else
-            prefs::kSigninAllowedOnNextStartup,
+        ;
 #endif
-            base::Value(false));
-        break;
     }
   }
 }
--- a/chrome/browser/policy/configuration_policy_handler_list_factory.cc
+++ b/chrome/browser/policy/configuration_policy_handler_list_factory.cc
@@ -68,10 +68,8 @@
 #include "components/policy/core/common/policy_pref_names.h"
 #include "components/policy/core/common/schema.h"
 #include "components/policy/policy_constants.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/search_engines/default_search_policy_handler.h"
 #include "components/security_state/core/security_state_pref_names.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/spellcheck/spellcheck_buildflags.h"
 #include "components/sync/base/pref_names.h"
 #include "components/sync/driver/sync_policy_handler.h"
@@ -173,12 +171,6 @@ const PolicyToPreferenceMapEntry kSimple
   { key::kQuicAllowed,
     prefs::kQuicAllowed,
     base::Value::Type::BOOLEAN },
-  { key::kSafeBrowsingEnabled,
-    prefs::kSafeBrowsingEnabled,
-    base::Value::Type::BOOLEAN },
-  { key::kSafeBrowsingForTrustedSourcesEnabled,
-    prefs::kSafeBrowsingForTrustedSourcesEnabled,
-    base::Value::Type::BOOLEAN },
   { key::kUrlKeyedAnonymizedDataCollectionEnabled,
     unified_consent::prefs::kUrlKeyedAnonymizedDataCollectionEnabled,
     base::Value::Type::BOOLEAN },
@@ -336,24 +328,9 @@ const PolicyToPreferenceMapEntry kSimple
   { key::kGloballyScopeHTTPAuthCacheEnabled,
     prefs::kGloballyScopeHTTPAuthCacheEnabled,
     base::Value::Type::BOOLEAN },
-  { key::kPasswordProtectionWarningTrigger,
-    prefs::kPasswordProtectionWarningTrigger,
-    base::Value::Type::INTEGER},
-  { key::kSafeBrowsingWhitelistDomains,
-    prefs::kSafeBrowsingWhitelistDomains,
-    base::Value::Type::LIST},
-  { key::kPasswordProtectionLoginURLs,
-    prefs::kPasswordProtectionLoginURLs,
-    base::Value::Type::LIST},
-  { key::kPasswordProtectionChangePasswordURL,
-    prefs::kPasswordProtectionChangePasswordURL,
-    base::Value::Type::STRING},
   { key::kSafeSitesFilterBehavior,
     policy_prefs::kSafeSitesFilterBehavior,
     base::Value::Type::INTEGER},
-  { key::kSendFilesForMalwareCheck,
-    prefs::kSafeBrowsingSendFilesForMalwareCheck,
-    base::Value::Type::INTEGER },
   { key::kWebComponentsV0Enabled,
     prefs::kWebComponentsV0Enabled,
     base::Value::Type::BOOLEAN },
@@ -466,18 +443,12 @@ const PolicyToPreferenceMapEntry kSimple
   { key::kURLWhitelist,
     policy_prefs::kUrlWhitelist,
     base::Value::Type::LIST },
-  { key::kRestrictSigninToPattern,
-    prefs::kGoogleServicesUsernamePattern,
-    base::Value::Type::STRING },
   { key::kDefaultWebBluetoothGuardSetting,
     prefs::kManagedDefaultWebBluetoothGuardSetting,
     base::Value::Type::INTEGER },
   { key::kDefaultMediaStreamSetting,
     prefs::kManagedDefaultMediaStreamSetting,
     base::Value::Type::INTEGER },
-  { key::kDisableSafeBrowsingProceedAnyway,
-    prefs::kSafeBrowsingProceedAnywayDisabled,
-    base::Value::Type::BOOLEAN },
   { key::kSSLErrorOverrideAllowed,
     prefs::kSSLErrorOverrideAllowed,
     base::Value::Type::BOOLEAN },
@@ -1175,27 +1146,6 @@ const PolicyToPreferenceMapEntry kSimple
   { key::kBrowserSwitcherDelay,
     browser_switcher::prefs::kDelay,
     base::Value::Type::INTEGER },
-  { key::kDelayDeliveryUntilVerdict,
-    prefs::kDelayDeliveryUntilVerdict,
-    base::Value::Type::INTEGER },
-  { key::kBlockLargeFileTransfer,
-    prefs::kBlockLargeFileTransfer,
-    base::Value::Type::INTEGER },
-  { key::kAllowPasswordProtectedFiles,
-    prefs::kAllowPasswordProtectedFiles,
-    base::Value::Type::INTEGER },
-  { key::kCheckContentCompliance,
-    prefs::kCheckContentCompliance,
-    base::Value::Type::INTEGER },
-  { key::kURLsToCheckComplianceOfDownloadedContent,
-    prefs::kURLsToCheckComplianceOfDownloadedContent,
-    base::Value::Type::LIST },
-  { key::kURLsToCheckForMalwareOfUploadedContent,
-    prefs::kURLsToCheckForMalwareOfUploadedContent,
-    base::Value::Type::LIST },
-  { key::kURLsToNotCheckComplianceOfUploadedContent,
-    prefs::kURLsToNotCheckComplianceOfUploadedContent,
-    base::Value::Type::LIST },
 #endif
 #if defined(OS_WIN)
   { key::kBrowserSwitcherUseIeSitelist,
@@ -1212,9 +1162,6 @@ const PolicyToPreferenceMapEntry kSimple
   { key::kBrowserGuestModeEnforced,
     prefs::kBrowserGuestModeEnforced,
     base::Value::Type::BOOLEAN },
-  { key::kUnsafeEventsReportingEnabled,
-    prefs::kUnsafeEventsReportingEnabled,
-    base::Value::Type::BOOLEAN },
 #endif
   { key::kPasswordLeakDetectionEnabled,
     password_manager::prefs::kPasswordLeakDetectionEnabled,
@@ -1461,22 +1408,6 @@ std::unique_ptr<ConfigurationPolicyHandl
       SimpleSchemaValidatingPolicyHandler::RECOMMENDED_ALLOWED,
       SimpleSchemaValidatingPolicyHandler::MANDATORY_PROHIBITED));
 
-  // Here we are deprecating policy SafeBrowsingExtendedReportingOptInAllowed
-  // in favour of new policy for SafeBrowsingExtendedReportingEnabled.
-  std::vector<std::unique_ptr<ConfigurationPolicyHandler>> sber_legacy_policy;
-  sber_legacy_policy.push_back(std::make_unique<SimplePolicyHandler>(
-      key::kSafeBrowsingExtendedReportingOptInAllowed,
-      prefs::kSafeBrowsingExtendedReportingOptInAllowed,
-      base::Value::Type::BOOLEAN));
-  handlers->AddHandler(std::make_unique<LegacyPoliciesDeprecatingPolicyHandler>(
-      std::move(sber_legacy_policy),
-      std::make_unique<SimpleSchemaValidatingPolicyHandler>(
-          key::kSafeBrowsingExtendedReportingEnabled,
-          prefs::kSafeBrowsingScoutReportingEnabled, chrome_schema,
-          SCHEMA_ALLOW_UNKNOWN,
-          SimpleSchemaValidatingPolicyHandler::RECOMMENDED_ALLOWED,
-          SimpleSchemaValidatingPolicyHandler::MANDATORY_ALLOWED)));
-
   // Handlers for policies with embedded JSON strings. These handlers are very
   // lenient - as long as the root value is of the right type, they only display
   // warnings and never reject the policy value.
@@ -1502,17 +1433,6 @@ std::unique_ptr<ConfigurationPolicyHandl
   signin_legacy_policies.push_back(std::make_unique<SimplePolicyHandler>(
       key::kForceBrowserSignin, prefs::kForceBrowserSignin,
       base::Value::Type::BOOLEAN));
-  signin_legacy_policies.push_back(std::make_unique<SimplePolicyHandler>(
-      key::kSigninAllowed,
-#if defined(OS_ANDROID)
-      // The new kSigninAllowedOnNextStartup pref is only used on Desktop.
-      // Keep the old kSigninAllowed pref for Android until the policy is
-      // fully deprecated in M71 and can be removed.
-      prefs::kSigninAllowed,
-#else
-      prefs::kSigninAllowedOnNextStartup,
-#endif
-      base::Value::Type::BOOLEAN));
   handlers->AddHandler(std::make_unique<LegacyPoliciesDeprecatingPolicyHandler>(
       std::move(signin_legacy_policies),
       std::make_unique<BrowserSigninPolicyHandler>(chrome_schema)));
--- a/chrome/browser/prefs/browser_prefs.cc
+++ b/chrome/browser/prefs/browser_prefs.cc
@@ -127,7 +127,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/proxy_config/pref_proxy_config_tracker_impl.h"
 #include "components/rappor/rappor_service_impl.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/search_engines/template_url_prepopulate_data.h"
 #include "components/security_state/core/security_state.h"
 #include "components/sessions/core/session_id_generator.h"
@@ -640,7 +639,6 @@ void RegisterLocalState(PrefRegistrySimp
   profiles::RegisterPrefs(registry);
   rappor::RapporServiceImpl::RegisterPrefs(registry);
   RegisterScreenshotPrefs(registry);
-  safe_browsing::RegisterLocalStatePrefs(registry);
   secure_origin_whitelist::RegisterPrefs(registry);
   sessions::SessionIdGenerator::RegisterPrefs(registry);
   SSLConfigServiceManager::RegisterPrefs(registry);
@@ -840,7 +838,6 @@ void RegisterProfilePrefs(user_prefs::Pr
   PushMessagingAppIdentifier::RegisterProfilePrefs(registry);
   QuietNotificationPermissionUiState::RegisterProfilePrefs(registry);
   RegisterBrowserUserPrefs(registry);
-  safe_browsing::RegisterProfilePrefs(registry);
   SafeBrowsingTriggeredPopupBlocker::RegisterProfilePrefs(registry);
   security_state::RegisterProfilePrefs(registry);
   SessionStartupPref::RegisterProfilePrefs(registry);
--- a/chrome/browser/prefs/chrome_pref_service_factory.cc
+++ b/chrome/browser/prefs/chrome_pref_service_factory.cc
@@ -47,10 +47,8 @@
 #include "components/prefs/pref_service.h"
 #include "components/prefs/pref_store.h"
 #include "components/prefs/pref_value_store.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/search_engines/default_search_manager.h"
 #include "components/search_engines/search_engines_pref_names.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/sync/base/model_type.h"
 #include "components/sync/base/pref_names.h"
 #include "components/sync_preferences/pref_model_associator.h"
@@ -120,8 +118,6 @@ const prefs::TrackedPreferenceMetadata k
     {5, extensions::pref_names::kExtensions, EnforcementLevel::NO_ENFORCEMENT,
      PrefTrackingStrategy::SPLIT, ValueType::IMPERSONAL},
 #endif
-    {6, prefs::kGoogleServicesLastUsername, EnforcementLevel::ENFORCE_ON_LOAD,
-     PrefTrackingStrategy::ATOMIC, ValueType::PERSONAL},
     {7, prefs::kSearchProviderOverrides, EnforcementLevel::ENFORCE_ON_LOAD,
      PrefTrackingStrategy::ATOMIC, ValueType::IMPERSONAL},
 #if !defined(OS_ANDROID)
@@ -145,8 +141,6 @@ const prefs::TrackedPreferenceMetadata k
      PrefTrackingStrategy::ATOMIC, ValueType::IMPERSONAL},
     // kSyncRemainingRollbackTries is deprecated and will be removed a few
     // releases after M50.
-    {18, prefs::kSafeBrowsingIncidentsSent, EnforcementLevel::ENFORCE_ON_LOAD,
-     PrefTrackingStrategy::ATOMIC, ValueType::IMPERSONAL},
 #if defined(OS_WIN)
     {19, prefs::kSwReporterPromptVersion, EnforcementLevel::ENFORCE_ON_LOAD,
      PrefTrackingStrategy::ATOMIC, ValueType::IMPERSONAL},
@@ -155,10 +149,6 @@ const prefs::TrackedPreferenceMetadata k
     {22, prefs::kSwReporterPromptSeed, EnforcementLevel::ENFORCE_ON_LOAD,
      PrefTrackingStrategy::ATOMIC, ValueType::IMPERSONAL},
 #endif
-    {23, prefs::kGoogleServicesAccountId, EnforcementLevel::ENFORCE_ON_LOAD,
-     PrefTrackingStrategy::ATOMIC, ValueType::PERSONAL},
-    {24, prefs::kGoogleServicesLastAccountId, EnforcementLevel::ENFORCE_ON_LOAD,
-     PrefTrackingStrategy::ATOMIC, ValueType::PERSONAL},
 #if defined(OS_WIN)
     {25, prefs::kSettingsResetPromptPromptWave,
      EnforcementLevel::ENFORCE_ON_LOAD, PrefTrackingStrategy::ATOMIC,
--- a/chrome/browser/prefs/pref_functional_browsertest.cc
+++ b/chrome/browser/prefs/pref_functional_browsertest.cc
@@ -22,7 +22,6 @@
 #include "components/content_settings/core/browser/website_settings_registry.h"
 #include "components/content_settings/core/common/content_settings_types.h"
 #include "components/content_settings/core/common/pref_names.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/sync_preferences/pref_service_syncable.h"
 #include "content/public/browser/web_contents.h"
 #include "content/public/test/browser_test_utils.h"
@@ -217,9 +216,6 @@ IN_PROC_BROWSER_TEST_F(PrefsFunctionalTe
   prefs->SetInteger(prefs::kNetworkPredictionOptions,
                     chrome_browser_net::NETWORK_PREDICTION_NEVER);
 
-  EXPECT_TRUE(prefs->GetBoolean(prefs::kSafeBrowsingEnabled));
-  prefs->SetBoolean(prefs::kSafeBrowsingEnabled, false);
-
   EXPECT_TRUE(prefs->GetBoolean(prefs::kAlternateErrorPagesEnabled));
   prefs->SetBoolean(prefs::kAlternateErrorPagesEnabled, false);
 
@@ -233,7 +229,6 @@ IN_PROC_BROWSER_TEST_F(PrefsFunctionalTe
 
   EXPECT_EQ(chrome_browser_net::NETWORK_PREDICTION_NEVER,
             prefs->GetInteger(prefs::kNetworkPredictionOptions));
-  EXPECT_FALSE(prefs->GetBoolean(prefs::kSafeBrowsingEnabled));
   EXPECT_FALSE(prefs->GetBoolean(prefs::kAlternateErrorPagesEnabled));
   EXPECT_FALSE(prefs->GetBoolean(prefs::kSearchSuggestEnabled));
 }
--- a/chrome/browser/profiles/gaia_info_update_service.cc
+++ b/chrome/browser/profiles/gaia_info_update_service.cc
@@ -20,7 +20,6 @@
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
 #include "components/signin/public/base/avatar_icon_util.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "content/public/browser/notification_details.h"
 #include "content/public/browser/storage_partition.h"
@@ -88,8 +87,6 @@ void GAIAInfoUpdateService::Update(const
   entry->SetGAIAName(base::UTF8ToUTF16(info.full_name));
 
   const base::string16 hosted_domain = base::UTF8ToUTF16(info.hosted_domain);
-  profile_prefs_->SetString(prefs::kGoogleServicesHostedDomain,
-                            base::UTF16ToUTF8(hosted_domain));
 
   if (info.picture_url == kNoPictureURLFound) {
     entry->SetGAIAPicture(gfx::Image());
@@ -124,8 +121,6 @@ void GAIAInfoUpdateService::ClearProfile
   entry->SetGAIAName(base::string16());
   entry->SetGAIAGivenName(base::string16());
   entry->SetGAIAPicture(gfx::Image());
-  // Unset the cached URL.
-  profile_prefs_->ClearPref(prefs::kGoogleServicesHostedDomain);
 }
 
 void GAIAInfoUpdateService::Shutdown() {
--- a/chrome/browser/profiles/gaia_info_update_service_unittest.cc
+++ b/chrome/browser/profiles/gaia_info_update_service_unittest.cc
@@ -26,7 +26,6 @@
 #include "chrome/test/base/testing_profile.h"
 #include "chrome/test/base/testing_profile_manager.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/sync_preferences/pref_service_syncable.h"
 #include "testing/gmock/include/gmock/gmock.h"
--- a/chrome/browser/profiles/off_the_record_profile_io_data.cc
+++ b/chrome/browser/profiles/off_the_record_profile_io_data.cc
@@ -25,7 +25,6 @@
 #include "chrome/common/url_constants.h"
 #include "components/net_log/chrome_net_log.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/cookie_store_factory.h"
@@ -83,10 +82,6 @@ void OffTheRecordProfileIOData::Handle::
   // Set initialized_ to true at the beginning in case any of the objects
   // below try to get the ResourceContext pointer.
   initialized_ = true;
-  io_data_->safe_browsing_enabled()->Init(prefs::kSafeBrowsingEnabled,
-      profile_->GetPrefs());
-  io_data_->safe_browsing_enabled()->MoveToSequence(
-      base::CreateSingleThreadTaskRunner({BrowserThread::IO}));
   io_data_->InitializeOnUIThread(profile_);
 }
 
--- a/chrome/browser/profiles/profile.cc
+++ b/chrome/browser/profiles/profile.cc
@@ -22,7 +22,6 @@
 #include "components/language/core/browser/pref_names.h"
 #include "components/pref_registry/pref_registry_syncable.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/sync/base/sync_prefs.h"
 #include "components/sync/driver/sync_driver_switches.h"
 #include "components/sync/driver/sync_service.h"
--- a/chrome/browser/profiles/profile_impl.cc
+++ b/chrome/browser/profiles/profile_impl.cc
@@ -135,7 +135,6 @@
 #include "components/policy/core/common/cloud/user_cloud_policy_manager.h"
 #include "components/pref_registry/pref_registry_syncable.h"
 #include "components/prefs/scoped_user_pref_update.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/sync_preferences/pref_service_syncable.h"
 #include "components/url_formatter/url_fixer.h"
--- a/chrome/browser/profiles/profile_impl_io_data.cc
+++ b/chrome/browser/profiles/profile_impl_io_data.cc
@@ -43,7 +43,6 @@
 #include "components/prefs/pref_filter.h"
 #include "components/prefs/pref_member.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "content/public/browser/browser_context.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
@@ -116,10 +115,6 @@ void ProfileImplIOData::Handle::LazyInit
   // below try to get the ResourceContext pointer.
   initialized_ = true;
   PrefService* pref_service = profile_->GetPrefs();
-  io_data_->safe_browsing_enabled()->Init(prefs::kSafeBrowsingEnabled,
-      pref_service);
-  io_data_->safe_browsing_enabled()->MoveToSequence(
-      base::CreateSingleThreadTaskRunner({BrowserThread::IO}));
   io_data_->InitializeOnUIThread(profile_);
 }
 
--- a/chrome/browser/profiles/profile_io_data.cc
+++ b/chrome/browser/profiles/profile_io_data.cc
@@ -52,7 +52,6 @@
 #include "components/metrics/metrics_service.h"
 #include "components/net_log/chrome_net_log.h"
 #include "components/policy/core/common/cloud/user_cloud_policy_manager.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/sync/base/pref_names.h"
 #include "components/url_formatter/url_fixer.h"
 #include "content/public/browser/browser_task_traits.h"
--- a/chrome/browser/profiles/profile_manager.cc
+++ b/chrome/browser/profiles/profile_manager.cc
@@ -83,7 +83,6 @@
 #include "components/search_engines/default_search_manager.h"
 #include "components/signin/public/base/signin_buildflags.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/primary_account_mutator.h"
 #include "components/sync/base/stop_source.h"
@@ -1666,7 +1665,6 @@ void ProfileManager::AddProfileToStorage
 
 void ProfileManager::SetNonPersonalProfilePrefs(Profile* profile) {
   PrefService* prefs = profile->GetPrefs();
-  prefs->SetBoolean(prefs::kSigninAllowed, false);
   prefs->SetBoolean(bookmarks::prefs::kEditBookmarksEnabled, false);
   prefs->SetBoolean(bookmarks::prefs::kShowBookmarkBar, false);
   prefs->ClearPref(DefaultSearchManager::kDefaultSearchProviderDataPrefName);
--- a/chrome/browser/profiles/profile_window.cc
+++ b/chrome/browser/profiles/profile_window.cc
@@ -39,7 +39,6 @@
 #include "chrome/common/url_constants.h"
 #include "components/flags_ui/pref_service_flags_storage.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "content/public/browser/browser_thread.h"
@@ -363,8 +362,7 @@ bool IsLockAvailable(Profile* profile) {
   if (profile->IsGuestSession() || profile->IsSystemProfile())
     return false;
 
-  std::string hosted_domain = profile->GetPrefs()->
-      GetString(prefs::kGoogleServicesHostedDomain);
+  std::string hosted_domain;
   // TODO(mlerman): After one release remove any hosted_domain reference to the
   // pref, since all users will have this in the AccountTrackerService.
   if (hosted_domain.empty()) {
--- a/chrome/browser/profiles/profiles_state.cc
+++ b/chrome/browser/profiles/profiles_state.cc
@@ -38,7 +38,6 @@
 #include "chrome/browser/profiles/gaia_info_update_service.h"
 #include "chrome/browser/profiles/gaia_info_update_service_factory.h"
 #include "chrome/browser/signin/signin_error_controller_factory.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #endif
 
 namespace profiles {
@@ -178,10 +177,6 @@ bool IsProfileLocked(const base::FilePat
 
 #if !defined(OS_CHROMEOS)
 void UpdateIsProfileLockEnabledIfNeeded(Profile* profile) {
-  if (!profile->GetPrefs()->GetString(prefs::kGoogleServicesHostedDomain).
-      empty())
-    return;
-
   UpdateGaiaProfileInfoIfNeeded(profile);
 }
 
--- a/chrome/browser/resources/settings/privacy_page/personalization_options.html
+++ b/chrome/browser/resources/settings/privacy_page/personalization_options.html
@@ -59,11 +59,6 @@
         sub-label="$i18n{linkDoctorPrefDesc}">
     </settings-toggle-button>
     <template is="dom-if" if="[[!privacySettingsRedesignEnabled_]]">
-      <settings-toggle-button id="safeBrowsingToggle"
-          pref="{{prefs.safebrowsing.enabled}}"
-          label="$i18n{safeBrowsingEnableProtection}"
-          sub-label="$i18n{safeBrowsingEnableProtectionDesc}">
-      </settings-toggle-button>
       <template is="dom-if" if="[[passwordsLeakDetectionEnabled_]]">
         <settings-passwords-leak-detection-toggle
             id="passwordsLeakDetectionToggle"
@@ -71,14 +66,6 @@
             sync-status="[[syncStatus]]">
         </settings-passwords-leak-detection-toggle>
       </template>
-      <settings-toggle-button id="safeBrowsingReportingToggle"
-          pref="[[safeBrowsingReportingPref_]]" no-set-pref
-          label="$i18n{safeBrowsingEnableExtendedReporting}"
-          sub-label="$i18n{safeBrowsingEnableExtendedReportingDesc}"
-          disabled="[[getDisabledExtendedSafeBrowsing_(prefs.*)]]"
-          on-settings-boolean-control-change=
-              "onSafeBrowsingReportingToggleChange_">
-      </settings-toggle-button>
     </template>
 <if expr="_google_chrome">
 <if expr="chromeos">
--- a/chrome/browser/resources/settings/privacy_page/personalization_options.js
+++ b/chrome/browser/resources/settings/privacy_page/personalization_options.js
@@ -127,20 +127,7 @@ Polymer({
 
   /** @private */
   onSafeBrowsingReportingPrefChange_: function() {
-    if (this.prefs == undefined) {
-      return;
-    }
-    const safeBrowsingScoutPref =
-        this.getPref('safebrowsing.scout_reporting_enabled');
-    const prefValue = !!this.getPref('safebrowsing.enabled').value &&
-        !!safeBrowsingScoutPref.value;
-    this.safeBrowsingReportingPref_ = {
-      key: '',
-      type: chrome.settingsPrivate.PrefType.BOOLEAN,
-      value: prefValue,
-      enforcement: safeBrowsingScoutPref.enforcement,
-      controlledBy: safeBrowsingScoutPref.controlledBy,
-    };
+    return;
   },
 
   // <if expr="_google_chrome and not chromeos">
--- a/chrome/browser/resources/settings/privacy_page/privacy_page.html
+++ b/chrome/browser/resources/settings/privacy_page/privacy_page.html
@@ -104,12 +104,6 @@
             class$="[[getIronCollapseCssClass_(
               privacySettingsRedesignEnabled_)]]">
           <template is="dom-if" if="[[privacySettingsRedesignEnabled_]]">
-            <settings-toggle-button id="safeBrowsingToggle"
-                class$="[[getTopBarCssClass_(privacySettingsRedesignEnabled_)]]"
-                pref="{{prefs.safebrowsing.enabled}}"
-                label="$i18n{safeBrowsingEnableProtection}"
-                sub-label="$i18n{safeBrowsingEnableProtectionDesc}">
-            </settings-toggle-button>
             <template is="dom-if" if="[[passwordsLeakDetectionEnabled_]]">
               <settings-passwords-leak-detection-toggle
                   id="passwordsLeakDetectionToggle"
@@ -117,14 +111,6 @@
                   sync-status="[[syncStatus]]">
               </settings-passwords-leak-detection-toggle>
             </template>
-            <settings-toggle-button id="safeBrowsingReportingToggle"
-                pref="[[safeBrowsingReportingPref_]]" no-set-pref
-                label="$i18n{safeBrowsingEnableExtendedReporting}"
-                sub-label="$i18n{safeBrowsingEnableExtendedReportingDesc}"
-                disabled="[[getDisabledExtendedSafeBrowsing_(prefs.*)]]"
-                on-settings-boolean-control-change=
-                    "onSafeBrowsingReportingToggleChange_">
-            </settings-toggle-button>
           </template>
 <if expr="not chromeos">
         <template is="dom-if" if="[[!privacySettingsRedesignEnabled_]]">
@@ -527,26 +513,6 @@
           </category-setting-exceptions>
         </settings-subpage>
       </template>
-      <template is="dom-if" if="[[enableSafeBrowsingSubresourceFilter_]]"
-          no-search>
-        <template is="dom-if" route-path="/content/ads" no-search>
-          <settings-subpage page-title="$i18n{siteSettingsAds}"
-              search-label="$i18n{siteSettingsAllSitesSearch}"
-              search-term="{{searchFilter_}}">
-            <category-default-setting
-                category="{{ContentSettingsTypes.ADS}}"
-                toggle-off-label="$i18n{siteSettingsAdsBlockRecommended}"
-                toggle-on-label="$i18n{siteSettingsAllowed}">
-            </category-default-setting>
-            <category-setting-exceptions
-                category="{{ContentSettingsTypes.ADS}}"
-                read-only-list
-                block-header="$i18n{siteSettingsBlock}"
-                search-filter="[[searchFilter_]]">
-            </category-setting-exceptions>
-          </settings-subpage>
-       </template>
-     </template>
      <template is="dom-if" route-path="/content/unsandboxedPlugins" no-search>
         <settings-subpage page-title="$i18n{siteSettingsUnsandboxedPlugins}"
             search-label="$i18n{siteSettingsAllSitesSearch}"
--- a/chrome/browser/resources/settings/privacy_page/privacy_page.js
+++ b/chrome/browser/resources/settings/privacy_page/privacy_page.js
@@ -113,7 +113,7 @@ Polymer({
     enableSafeBrowsingSubresourceFilter_: {
       type: Boolean,
       value: function() {
-        return loadTimeData.getBoolean('enableSafeBrowsingSubresourceFilter');
+        return false;
       }
     },
 
@@ -290,20 +290,7 @@ Polymer({
 
   /** @private */
   onSafeBrowsingReportingPrefChange_: function() {
-    if (this.prefs == undefined) {
-      return;
-    }
-    const safeBrowsingScoutPref =
-        this.getPref('safebrowsing.scout_reporting_enabled');
-    const prefValue = !!this.getPref('safebrowsing.enabled').value &&
-        !!safeBrowsingScoutPref.value;
-    this.safeBrowsingReportingPref_ = {
-      key: '',
-      type: chrome.settingsPrivate.PrefType.BOOLEAN,
-      value: prefValue,
-      enforcement: safeBrowsingScoutPref.enforcement,
-      controlledBy: safeBrowsingScoutPref.controlledBy,
-    };
+    return;
   },
 
   /**
--- a/chrome/browser/resources/settings/site_settings_page/site_settings_page.js
+++ b/chrome/browser/resources/settings/site_settings_page/site_settings_page.js
@@ -39,7 +39,7 @@ Polymer({
     enableSafeBrowsingSubresourceFilter_: {
       type: Boolean,
       value: function() {
-        return loadTimeData.getBoolean('enableSafeBrowsingSubresourceFilter');
+        return false;
       }
     },
 
--- a/chrome/browser/safe_browsing/ad_redirect_trigger_browsertest.cc
+++ b/chrome/browser/safe_browsing/ad_redirect_trigger_browsertest.cc
@@ -14,7 +14,6 @@
 #include "chrome/test/base/in_process_browser_test.h"
 #include "chrome/test/base/ui_test_utils.h"
 #include "components/prefs/testing_pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/features.h"
 #include "components/safe_browsing/triggers/ad_redirect_trigger.h"
 #include "components/safe_browsing/triggers/mock_trigger_manager.h"
--- a/chrome/browser/safe_browsing/advanced_protection_status_manager.cc
+++ b/chrome/browser/safe_browsing/advanced_protection_status_manager.cc
@@ -11,7 +11,6 @@
 #include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
 #include "chrome/browser/signin/identity_manager_factory.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/features.h"
 #include "components/signin/public/identity_manager/accounts_mutator.h"
 #include "components/signin/public/identity_manager/primary_account_access_token_fetcher.h"
@@ -55,10 +54,7 @@ void AdvancedProtectionStatusManager::Ma
 
   is_under_advanced_protection_ = core_info.is_under_advanced_protection;
 
-  if (pref_service_->HasPrefPath(prefs::kAdvancedProtectionLastRefreshInUs)) {
-    last_refreshed_ = base::Time::FromDeltaSinceWindowsEpoch(
-        base::TimeDelta::FromMicroseconds(pref_service_->GetInt64(
-            prefs::kAdvancedProtectionLastRefreshInUs)));
+  if (false) {
     if (is_under_advanced_protection_)
       ScheduleNextRefresh();
   } else {
@@ -214,9 +210,6 @@ void AdvancedProtectionStatusManager::Ca
 
 void AdvancedProtectionStatusManager::UpdateLastRefreshTime() {
   last_refreshed_ = base::Time::Now();
-  pref_service_->SetInt64(
-      prefs::kAdvancedProtectionLastRefreshInUs,
-      last_refreshed_.ToDeltaSinceWindowsEpoch().InMicroseconds());
 }
 
 bool AdvancedProtectionStatusManager::RequestsAdvancedProtectionVerdicts() {
--- a/chrome/browser/safe_browsing/advanced_protection_status_manager_unittest.cc
+++ b/chrome/browser/safe_browsing/advanced_protection_status_manager_unittest.cc
@@ -9,7 +9,6 @@
 #include "base/test/metrics/histogram_tester.h"
 #include "base/test/task_environment.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/signin/public/identity_manager/accounts_mutator.h"
 #include "components/signin/public/identity_manager/identity_test_environment.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
--- a/chrome/browser/safe_browsing/android/services_delegate_android.h
+++ b/chrome/browser/safe_browsing/android/services_delegate_android.h
@@ -7,7 +7,6 @@
 
 #include "base/macros.h"
 #include "chrome/browser/safe_browsing/services_delegate.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 
 namespace safe_browsing {
 
--- a/chrome/browser/safe_browsing/certificate_reporting_service.cc
+++ b/chrome/browser/safe_browsing/certificate_reporting_service.cc
@@ -12,7 +12,6 @@
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/certificate_error_report.h"
 #include "content/public/browser/browser_thread.h"
 #include "services/network/public/cpp/shared_url_loader_factory.h"
--- a/chrome/browser/safe_browsing/certificate_reporting_service_browsertest.cc
+++ b/chrome/browser/safe_browsing/certificate_reporting_service_browsertest.cc
@@ -26,7 +26,6 @@
 #include "chrome/test/base/in_process_browser_test.h"
 #include "chrome/test/base/ui_test_utils.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/cert_report_helper.h"
 #include "components/security_interstitials/content/certificate_error_report.h"
 #include "components/variations/variations_params_manager.h"
--- a/chrome/browser/safe_browsing/chrome_cleaner/chrome_cleaner_controller_impl_win.cc
+++ b/chrome/browser/safe_browsing/chrome_cleaner/chrome_cleaner_controller_impl_win.cc
@@ -42,7 +42,6 @@
 #include "components/component_updater/component_updater_service.h"
 #include "components/component_updater/pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
 #include "extensions/browser/extension_registry.h"
--- a/chrome/browser/safe_browsing/chrome_cleaner/reporter_runner_browsertest_win.cc
+++ b/chrome/browser/safe_browsing/chrome_cleaner/reporter_runner_browsertest_win.cc
@@ -44,7 +44,6 @@
 #include "components/policy/core/common/mock_configuration_policy_provider.h"
 #include "components/policy/policy_constants.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "testing/gmock/include/gmock/gmock.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
--- a/chrome/browser/safe_browsing/chrome_cleaner/srt_client_info_win.cc
+++ b/chrome/browser/safe_browsing/chrome_cleaner/srt_client_info_win.cc
@@ -12,7 +12,6 @@
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/profiles/profile_manager.h"
 #include "chrome/common/channel_info.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/version_info/version_info.h"
 
 namespace safe_browsing {
--- a/chrome/browser/safe_browsing/chrome_password_protection_service.cc
+++ b/chrome/browser/safe_browsing/chrome_password_protection_service.cc
@@ -37,7 +37,6 @@
 #include "components/prefs/pref_change_registrar.h"
 #include "components/prefs/pref_service.h"
 #include "components/prefs/scoped_user_pref_update.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/common/utils.h"
 #include "components/safe_browsing/db/database_manager.h"
 #include "components/safe_browsing/features.h"
@@ -1182,14 +1181,6 @@ bool ChromePasswordProtectionService::Ha
 }
 
 void ChromePasswordProtectionService::OnWarningTriggerChanged() {
-  const base::Value* pref_value = pref_change_registrar_->prefs()->Get(
-      prefs::kPasswordProtectionWarningTrigger);
-  // If password protection is not turned off, do nothing.
-  if (static_cast<PasswordProtectionTrigger>(pref_value->GetInt()) !=
-      PASSWORD_PROTECTION_OFF) {
-    return;
-  }
-
   // Clears captured enterprise password hashes or GSuite sync password hashes.
   scoped_refptr<password_manager::PasswordStore> password_store =
       GetProfilePasswordStore();
@@ -1356,7 +1347,7 @@ PrefService* ChromePasswordProtectionSer
 }
 
 bool ChromePasswordProtectionService::IsSafeBrowsingEnabled() {
-  return GetPrefs()->GetBoolean(prefs::kSafeBrowsingEnabled);
+  return false;
 }
 
 bool ChromePasswordProtectionService::IsExtendedReporting() {
@@ -1387,10 +1378,8 @@ bool ChromePasswordProtectionService::Is
       return enabled;
     }
 
-    PasswordProtectionTrigger trigger_level =
-        GetPasswordProtectionWarningTriggerPref(password_type);
     // Only override policy if password protection is off for Gmail users.
-    if (trigger_level == PASSWORD_PROTECTION_OFF) {
+    if (true) {
       *reason = RequestOutcome::TURNED_OFF_BY_ADMIN;
       return false;
     }
@@ -1555,24 +1544,6 @@ MaybeCreateNavigationThrottle(content::N
                  : nullptr;
 }
 
-PasswordProtectionTrigger
-ChromePasswordProtectionService::GetPasswordProtectionWarningTriggerPref(
-    ReusedPasswordAccountType password_type) const {
-  if (password_type.account_type() == ReusedPasswordAccountType::GMAIL ||
-      (password_type.account_type() ==
-           ReusedPasswordAccountType::SAVED_PASSWORD &&
-       base::FeatureList::IsEnabled(
-           safe_browsing::kPasswordProtectionForSavedPasswords)))
-    return PHISHING_REUSE;
-
-  bool is_policy_managed = profile_->GetPrefs()->HasPrefPath(
-      prefs::kPasswordProtectionWarningTrigger);
-  PasswordProtectionTrigger trigger_level =
-      static_cast<PasswordProtectionTrigger>(profile_->GetPrefs()->GetInteger(
-          prefs::kPasswordProtectionWarningTrigger));
-  return is_policy_managed ? trigger_level : PHISHING_REUSE;
-}
-
 bool ChromePasswordProtectionService::IsURLWhitelistedForPasswordEntry(
     const GURL& url,
     RequestOutcome* reason) const {
--- a/chrome/browser/safe_browsing/chrome_password_protection_service.h
+++ b/chrome/browser/safe_browsing/chrome_password_protection_service.h
@@ -210,13 +210,6 @@ class ChromePasswordProtectionService : 
   bool UserClickedThroughSBInterstitial(
       content::WebContents* web_contents) override;
 
-  // If |prefs::kPasswordProtectionWarningTrigger| is not managed by enterprise
-  // policy, this function should always return PHISHING_REUSE. Otherwise,
-  // returns the specified pref value adjusted for the given username's account
-  // type.
-  PasswordProtectionTrigger GetPasswordProtectionWarningTriggerPref(
-      ReusedPasswordAccountType password_type) const override;
-
   // If |url| matches Safe Browsing whitelist domains, password protection
   // change password URL, or password protection login URLs in the enterprise
   // policy.
--- a/chrome/browser/safe_browsing/chrome_password_protection_service_browsertest.cc
+++ b/chrome/browser/safe_browsing/chrome_password_protection_service_browsertest.cc
@@ -25,7 +25,6 @@
 #include "components/password_manager/core/common/password_manager_pref_names.h"
 #include "components/prefs/pref_service.h"
 #include "components/prefs/scoped_user_pref_update.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/features.h"
 #include "components/safe_browsing/password_protection/metrics_util.h"
 #include "components/safe_browsing/password_protection/password_protection_request.h"
--- a/chrome/browser/safe_browsing/chrome_password_protection_service_sync_browsertest.cc
+++ b/chrome/browser/safe_browsing/chrome_password_protection_service_sync_browsertest.cc
@@ -27,10 +27,8 @@
 #include "components/password_manager/core/common/password_manager_pref_names.h"
 #include "components/prefs/pref_service.h"
 #include "components/prefs/scoped_user_pref_update.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/password_protection/password_protection_request.h"
 #include "components/security_state/core/security_state.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/identity_test_utils.h"
 #include "components/sync/driver/sync_service.h"
--- a/chrome/browser/safe_browsing/client_side_detection_host.cc
+++ b/chrome/browser/safe_browsing/client_side_detection_host.cc
@@ -25,7 +25,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/common/safe_browsing.mojom-shared.h"
 #include "components/safe_browsing/common/safe_browsing.mojom.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/db/allowlist_checker_client.h"
 #include "components/safe_browsing/db/database_manager.h"
 #include "components/safe_browsing/proto/csd.pb.h"
--- a/chrome/browser/safe_browsing/client_side_detection_service.cc
+++ b/chrome/browser/safe_browsing/client_side_detection_service.cc
@@ -25,7 +25,6 @@
 #include "chrome/common/safe_browsing/client_model.pb.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/common/safe_browsing.mojom.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/common/utils.h"
 #include "components/safe_browsing/proto/csd.pb.h"
 #include "content/public/browser/browser_thread.h"
@@ -228,20 +227,8 @@ void ClientSideDetectionService::SendMod
   // and we select the model based on the extended reporting setting.
   Profile* profile = Profile::FromBrowserContext(process->GetBrowserContext());
   std::string model;
-  if (profile->GetPrefs()->GetBoolean(prefs::kSafeBrowsingEnabled)) {
-    if (IsExtendedReportingEnabled(*profile->GetPrefs())) {
-      DVLOG(2) << "Sending phishing model " << model_loader_extended_->name()
-               << " to RenderProcessHost @" << process;
-      model = model_loader_extended_->model_str();
-    } else {
-      DVLOG(2) << "Sending phishing model " << model_loader_standard_->name()
-               << " to RenderProcessHost @" << process;
-      model = model_loader_standard_->model_str();
-    }
-  } else {
-    DVLOG(2) << "Disabling client-side phishing detection for "
-             << "RenderProcessHost @" << process;
-  }
+  DVLOG(2) << "Disabling client-side phishing detection for "
+           << "RenderProcessHost @" << process;
 
   mojo::Remote<safe_browsing::mojom::PhishingModelSetter> phishing;
   process->BindReceiver(phishing.BindNewPipeAndPassReceiver());
--- a/chrome/browser/safe_browsing/cloud_content_scanning/binary_upload_service.cc
+++ b/chrome/browser/safe_browsing/cloud_content_scanning/binary_upload_service.cc
@@ -23,7 +23,6 @@
 #include "chrome/browser/safe_browsing/cloud_content_scanning/multipart_uploader.h"
 #include "chrome/browser/safe_browsing/dm_token_utils.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/proto/webprotect.pb.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
--- a/chrome/browser/safe_browsing/download_protection/check_client_download_request.cc
+++ b/chrome/browser/safe_browsing/download_protection/check_client_download_request.cc
@@ -35,7 +35,6 @@
 #include "components/policy/core/browser/url_util.h"
 #include "components/policy/core/common/policy_pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/common/utils.h"
 #include "components/safe_browsing/features.h"
 #include "components/safe_browsing/proto/csd.pb.h"
--- a/chrome/browser/safe_browsing/download_protection/check_client_download_request_base.cc
+++ b/chrome/browser/safe_browsing/download_protection/check_client_download_request_base.cc
@@ -24,7 +24,6 @@
 #include "chrome/browser/safe_browsing/download_protection/ppapi_download_request.h"
 #include "chrome/common/safe_browsing/file_type_policies.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/common/utils.h"
 #include "components/safe_browsing/web_ui/safe_browsing_ui.h"
 #include "content/public/browser/browser_context.h"
--- a/chrome/browser/safe_browsing/download_protection/download_protection_service_unittest.cc
+++ b/chrome/browser/safe_browsing/download_protection/download_protection_service_unittest.cc
@@ -66,7 +66,6 @@
 #include "components/password_manager/core/browser/test_password_store.h"
 #include "components/prefs/pref_service.h"
 #include "components/prefs/scoped_user_pref_update.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/common/safebrowsing_switches.h"
 #include "components/safe_browsing/db/database_manager.h"
 #include "components/safe_browsing/db/test_database_manager.h"
--- a/chrome/browser/safe_browsing/incident_reporting/extension_data_collection_unittest.cc
+++ b/chrome/browser/safe_browsing/incident_reporting/extension_data_collection_unittest.cc
@@ -20,7 +20,6 @@
 #include "chrome/test/base/testing_browser_process.h"
 #include "chrome/test/base/testing_profile.h"
 #include "chrome/test/base/testing_profile_manager.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/proto/csd.pb.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
 #include "content/public/test/browser_task_environment.h"
--- a/chrome/browser/safe_browsing/incident_reporting/incident_reporting_service.cc
+++ b/chrome/browser/safe_browsing/incident_reporting/incident_reporting_service.cc
@@ -39,7 +39,6 @@
 #include "chrome/common/chrome_features.h"
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/proto/csd.pb.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/download_item_utils.h"
--- a/chrome/browser/safe_browsing/incident_reporting/incident_reporting_service_unittest.cc
+++ b/chrome/browser/safe_browsing/incident_reporting/incident_reporting_service_unittest.cc
@@ -33,7 +33,6 @@
 #include "chrome/test/base/testing_browser_process.h"
 #include "chrome/test/base/testing_profile.h"
 #include "chrome/test/base/testing_profile_manager.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/proto/csd.pb.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
 #include "content/public/test/browser_task_environment.h"
--- a/chrome/browser/safe_browsing/incident_reporting/last_download_finder_unittest.cc
+++ b/chrome/browser/safe_browsing/incident_reporting/last_download_finder_unittest.cc
@@ -42,7 +42,6 @@
 #include "components/history/core/browser/history_constants.h"
 #include "components/history/core/browser/history_database_params.h"
 #include "components/history/core/browser/history_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/proto/csd.pb.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
 #include "content/public/test/browser_task_environment.h"
--- a/chrome/browser/safe_browsing/incident_reporting/state_store.cc
+++ b/chrome/browser/safe_browsing/incident_reporting/state_store.cc
@@ -13,7 +13,6 @@
 #include "chrome/browser/safe_browsing/incident_reporting/incident.h"
 #include "chrome/browser/safe_browsing/incident_reporting/platform_state_store.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 
 namespace safe_browsing {
 
--- a/chrome/browser/safe_browsing/incident_reporting/state_store_unittest.cc
+++ b/chrome/browser/safe_browsing/incident_reporting/state_store_unittest.cc
@@ -21,7 +21,6 @@
 #include "chrome/test/base/testing_profile.h"
 #include "chrome/test/base/testing_profile_manager.h"
 #include "components/pref_registry/pref_registry_syncable.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/sync_preferences/pref_service_syncable.h"
 #include "components/sync_preferences/pref_service_syncable_factory.h"
 #include "content/public/test/browser_task_environment.h"
--- a/chrome/browser/safe_browsing/safe_browsing_blocking_page.cc
+++ b/chrome/browser/safe_browsing/safe_browsing_blocking_page.cc
@@ -21,7 +21,6 @@
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/browser/threat_details.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/features.h"
 #include "components/safe_browsing/triggers/trigger_manager.h"
 #include "components/security_interstitials/content/security_interstitial_controller_client.h"
--- a/chrome/browser/safe_browsing/safe_browsing_blocking_page_test.cc
+++ b/chrome/browser/safe_browsing/safe_browsing_blocking_page_test.cc
@@ -44,7 +44,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/browser/threat_details.h"
 #include "components/safe_browsing/common/safe_browsing.mojom.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/db/database_manager.h"
 #include "components/safe_browsing/db/test_database_manager.h"
 #include "components/safe_browsing/db/util.h"
--- a/chrome/browser/safe_browsing/safe_browsing_blocking_page_unittest.cc
+++ b/chrome/browser/safe_browsing/safe_browsing_blocking_page_unittest.cc
@@ -21,7 +21,6 @@
 #include "chrome/test/base/testing_profile.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/browser/threat_details.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/features.h"
 #include "components/security_interstitials/content/security_interstitial_controller_client.h"
 #include "components/security_interstitials/core/safe_browsing_quiet_error_ui.h"
--- a/chrome/browser/safe_browsing/safe_browsing_navigation_observer_manager.cc
+++ b/chrome/browser/safe_browsing/safe_browsing_navigation_observer_manager.cc
@@ -253,10 +253,7 @@ GURL SafeBrowsingNavigationObserverManag
 // static
 bool SafeBrowsingNavigationObserverManager::IsEnabledAndReady(
     Profile* profile) {
-  return profile->GetPrefs()->GetBoolean(prefs::kSafeBrowsingEnabled) &&
-         g_browser_process->safe_browsing_service() &&
-         g_browser_process->safe_browsing_service()
-             ->navigation_observer_manager();
+  return false;
 }
 
 // static
--- a/chrome/browser/safe_browsing/safe_browsing_service.cc
+++ b/chrome/browser/safe_browsing/safe_browsing_service.cc
@@ -86,7 +86,6 @@ base::FilePath SafeBrowsingService::GetB
 
 SafeBrowsingService::SafeBrowsingService()
     : services_delegate_(ServicesDelegate::Create(this)),
-      estimated_extended_reporting_by_prefs_(SBER_LEVEL_OFF),
       shutdown_(false),
       enabled_(false),
       enabled_by_prefs_(false) {}
@@ -203,8 +202,6 @@ TriggerManager* SafeBrowsingService::tri
 
 PasswordProtectionService* SafeBrowsingService::GetPasswordProtectionService(
     Profile* profile) const {
-  if (profile->GetPrefs()->GetBoolean(prefs::kSafeBrowsingEnabled))
-    return services_delegate_->GetPasswordProtectionService(profile);
   return nullptr;
 }
 
@@ -243,15 +240,11 @@ V4ProtocolConfig SafeBrowsingService::Ge
 
 VerdictCacheManager* SafeBrowsingService::GetVerdictCacheManager(
     Profile* profile) const {
-  if (profile->GetPrefs()->GetBoolean(prefs::kSafeBrowsingEnabled))
-    return services_delegate_->GetVerdictCacheManager(profile);
   return nullptr;
 }
 
 BinaryUploadService* SafeBrowsingService::GetBinaryUploadService(
     Profile* profile) const {
-  if (profile->GetPrefs()->GetBoolean(prefs::kSafeBrowsingEnabled))
-    return services_delegate_->GetBinaryUploadService(profile);
   return nullptr;
 }
 
@@ -340,9 +333,6 @@ void SafeBrowsingService::OnProfileAdded
   std::unique_ptr<PrefChangeRegistrar> registrar =
       std::make_unique<PrefChangeRegistrar>();
   registrar->Init(pref_service);
-  registrar->Add(
-      prefs::kSafeBrowsingEnabled,
-      base::Bind(&SafeBrowsingService::RefreshState, base::Unretained(this)));
   // ClientSideDetectionService will need to be refresh the models
   // renderers have if extended-reporting changes.
   registrar->Add(
@@ -354,9 +344,6 @@ void SafeBrowsingService::OnProfileAdded
   prefs_map_[pref_service] = std::move(registrar);
   RefreshState();
 
-  // Record the current pref state.
-  UMA_HISTOGRAM_BOOLEAN("SafeBrowsing.Pref.General",
-                        pref_service->GetBoolean(prefs::kSafeBrowsingEnabled));
   // Extended Reporting metrics are handled together elsewhere.
   RecordExtendedReportingMetrics(*pref_service);
 
@@ -395,16 +382,9 @@ void SafeBrowsingService::RefreshState()
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   // Check if any profile requires the service to be active.
   enabled_by_prefs_ = false;
-  estimated_extended_reporting_by_prefs_ = SBER_LEVEL_OFF;
   for (const auto& pref : prefs_map_) {
-    if (pref.first->GetBoolean(prefs::kSafeBrowsingEnabled)) {
+    if (false) {
       enabled_by_prefs_ = true;
-
-      ExtendedReportingLevel erl =
-          safe_browsing::GetExtendedReportingLevel(*pref.first);
-      if (erl != SBER_LEVEL_OFF) {
-        estimated_extended_reporting_by_prefs_ = erl;
-      }
     }
   }
 
--- a/chrome/browser/safe_browsing/safe_browsing_service.h
+++ b/chrome/browser/safe_browsing/safe_browsing_service.h
@@ -25,7 +25,6 @@
 #include "chrome/browser/profiles/profile_observer.h"
 #include "chrome/browser/safe_browsing/services_delegate.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/db/util.h"
 #include "components/safe_browsing/safe_browsing_service_interface.h"
 #include "content/public/browser/browser_thread.h"
@@ -92,15 +91,6 @@ class SafeBrowsingService : public SafeB
   // Called on the main thread to let us know that the io_thread is going away.
   void ShutDown();
 
-  // NOTE(vakh): This is not the most reliable way to find out if extended
-  // reporting has been enabled. That's why it starts with estimated_. It
-  // returns true if any of the profiles have extended reporting enabled. It may
-  // be called on any thread. That can lead to a race condition, but that's
-  // acceptable.
-  ExtendedReportingLevel estimated_extended_reporting_by_prefs() const {
-    return estimated_extended_reporting_by_prefs_;
-  }
-
   // Get current enabled status. Must be called on IO thread.
   bool enabled() const {
     DCHECK_CURRENTLY_ON(content::BrowserThread::IO);
@@ -268,10 +258,6 @@ class SafeBrowsingService : public SafeB
   // Provides phishing and malware statistics. Accessed on UI thread.
   std::unique_ptr<PingManager> ping_manager_;
 
-  // Whether SafeBrowsing Extended Reporting is enabled by the current set of
-  // profiles. Updated on the UI thread.
-  ExtendedReportingLevel estimated_extended_reporting_by_prefs_;
-
   // Whether the service has been shutdown.
   bool shutdown_;
 
--- a/chrome/browser/safe_browsing/telemetry/android/android_telemetry_service.cc
+++ b/chrome/browser/safe_browsing/telemetry/android/android_telemetry_service.cc
@@ -21,7 +21,6 @@
 #include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "components/keyed_service/core/service_access_type.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/db/database_manager.h"
 #include "components/safe_browsing/features.h"
 #include "components/safe_browsing/ping_manager.h"
@@ -168,7 +167,7 @@ const PrefService* AndroidTelemetryServi
 }
 
 bool AndroidTelemetryService::IsSafeBrowsingEnabled() {
-  return GetPrefs()->GetBoolean(prefs::kSafeBrowsingEnabled);
+  return false;
 }
 
 void AndroidTelemetryService::FillReferrerChain(
--- a/chrome/browser/safe_browsing/telemetry/android/android_telemetry_service_unittest.cc
+++ b/chrome/browser/safe_browsing/telemetry/android/android_telemetry_service_unittest.cc
@@ -16,7 +16,6 @@
 #include "chrome/test/base/testing_profile.h"
 #include "components/download/public/common/mock_download_item.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/features.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
--- a/chrome/browser/safe_browsing/ui_manager.cc
+++ b/chrome/browser/safe_browsing/ui_manager.cc
@@ -23,7 +23,6 @@
 #include "chrome/common/url_constants.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/browser/threat_details.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/ping_manager.h"
 #include "components/security_interstitials/content/security_interstitial_tab_helper.h"
 #include "content/public/browser/browser_thread.h"
--- a/chrome/browser/safe_browsing/ui_manager_unittest.cc
+++ b/chrome/browser/safe_browsing/ui_manager_unittest.cc
@@ -15,7 +15,6 @@
 #include "chrome/test/base/scoped_testing_local_state.h"
 #include "chrome/test/base/testing_browser_process.h"
 #include "chrome/test/base/testing_profile.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/db/util.h"
 #include "components/security_interstitials/core/base_safe_browsing_error_ui.h"
 #include "content/public/browser/browser_task_traits.h"
--- a/chrome/browser/safe_browsing/url_checker_delegate_impl.cc
+++ b/chrome/browser/safe_browsing/url_checker_delegate_impl.cc
@@ -14,7 +14,6 @@
 #include "chrome/browser/profiles/profile_io_data.h"
 #include "chrome/browser/safe_browsing/ui_manager.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/db/database_manager.h"
 #include "components/safe_browsing/db/v4_protocol_manager_util.h"
 #include "components/safe_browsing/features.h"
--- a/chrome/browser/signin/account_consistency_mode_manager.cc
+++ b/chrome/browser/signin/account_consistency_mode_manager.cc
@@ -18,7 +18,6 @@
 #include "components/pref_registry/pref_registry_syncable.h"
 #include "components/prefs/pref_service.h"
 #include "components/signin/public/base/signin_buildflags.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "google_apis/google_api_keys.h"
 
 #if defined(OS_CHROMEOS)
@@ -100,7 +99,6 @@ AccountConsistencyModeManager::AccountCo
   // pref.
   bool signin_allowed = prefs->GetBoolean(prefs::kSigninAllowedOnNextStartup) &&
                         IsBrowserSigninAllowedByCommandLine();
-  prefs->SetBoolean(prefs::kSigninAllowed, signin_allowed);
 
   UMA_HISTOGRAM_BOOLEAN("Signin.SigninAllowed", signin_allowed);
 #endif
@@ -235,7 +233,7 @@ AccountConsistencyModeManager::ComputeAc
     return AccountConsistencyMethod::kDisabled;
   }
 
-  if (!profile->GetPrefs()->GetBoolean(prefs::kSigninAllowed)) {
+  if (true) {
     VLOG(1) << "Desktop Identity Consistency disabled as sign-in to Chrome"
                "is not allowed";
     return AccountConsistencyMethod::kDisabled;
--- a/chrome/browser/signin/account_consistency_mode_manager_unittest.cc
+++ b/chrome/browser/signin/account_consistency_mode_manager_unittest.cc
@@ -19,7 +19,6 @@
 #include "components/prefs/testing_pref_store.h"
 #include "components/signin/public/base/account_consistency_method.h"
 #include "components/signin/public/base/signin_buildflags.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
 #include "content/public/test/browser_task_environment.h"
 #include "testing/gtest/include/gtest/gtest.h"
--- a/chrome/browser/signin/chrome_device_id_helper.cc
+++ b/chrome/browser/signin/chrome_device_id_helper.cc
@@ -15,7 +15,6 @@
 #include "base/logging.h"
 #include "chrome/browser/chromeos/profiles/profile_helper.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/signin_switches.h"
 #include "components/user_manager/known_user.h"
 #include "components/user_manager/user_manager.h"
@@ -66,21 +65,11 @@ void MigrateSigninScopedDeviceId(Profile
     return;
   const AccountId account_id = user->GetAccountId();
   if (user_manager::known_user::GetDeviceId(account_id).empty()) {
-    const std::string legacy_device_id = profile->GetPrefs()->GetString(
-        prefs::kGoogleServicesSigninScopedDeviceId);
-    if (!legacy_device_id.empty()) {
-      // Need to move device ID from the old location to the new one, if it has
-      // not been done yet.
-      user_manager::known_user::SetDeviceId(account_id, legacy_device_id);
-    } else {
-      user_manager::known_user::SetDeviceId(
-          account_id, GenerateSigninScopedDeviceId(
-                          user_manager::UserManager::Get()
-                              ->IsUserNonCryptohomeDataEphemeral(account_id)));
-    }
+    user_manager::known_user::SetDeviceId(
+        account_id, GenerateSigninScopedDeviceId(
+                        user_manager::UserManager::Get()
+                            ->IsUserNonCryptohomeDataEphemeral(account_id)));
   }
-  profile->GetPrefs()->SetString(prefs::kGoogleServicesSigninScopedDeviceId,
-                                 std::string());
 }
 
 #endif
--- a/chrome/browser/signin/chrome_signin_client.cc
+++ b/chrome/browser/signin/chrome_signin_client.cc
@@ -36,7 +36,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/signin/core/browser/cookie_settings_util.h"
 #include "components/signin/public/base/signin_buildflags.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/access_token_info.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "content/public/browser/browser_context.h"
--- a/chrome/browser/signin/chromeos_mirror_account_consistency_browsertest.cc
+++ b/chrome/browser/signin/chromeos_mirror_account_consistency_browsertest.cc
@@ -22,7 +22,6 @@
 #include "components/network_session_configurator/common/network_switches.h"
 #include "components/prefs/pref_service.h"
 #include "components/signin/core/browser/signin_header_helper.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/user_manager/user.h"
 #include "components/user_manager/user_manager.h"
 #include "content/public/test/browser_test_utils.h"
--- a/chrome/browser/signin/dice_browsertest.cc
+++ b/chrome/browser/signin/dice_browsertest.cc
@@ -54,7 +54,6 @@
 #include "components/signin/public/base/account_consistency_method.h"
 #include "components/signin/public/base/signin_client.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/identity_test_utils.h"
 #include "components/signin/public/identity_manager/primary_account_mutator.h"
--- a/chrome/browser/signin/header_modification_delegate_impl.cc
+++ b/chrome/browser/signin/header_modification_delegate_impl.cc
@@ -13,7 +13,6 @@
 #include "chrome/browser/sync/profile_sync_service_factory.h"
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/sync/base/pref_names.h"
 #include "components/sync/driver/sync_service.h"
@@ -71,7 +70,7 @@ void HeaderModificationDelegateImpl::Pro
 #endif
 #if BUILDFLAG(ENABLE_DICE_SUPPORT)
       sync_service && sync_service->IsSyncFeatureEnabled(),
-      prefs->GetString(prefs::kGoogleServicesSigninScopedDeviceId),
+      std::string(),
 #endif
       cookie_settings_.get());
 }
--- a/chrome/browser/signin/mirror_browsertest.cc
+++ b/chrome/browser/signin/mirror_browsertest.cc
@@ -31,7 +31,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/signin/core/browser/dice_header_helper.h"
 #include "components/signin/core/browser/signin_header_helper.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "content/public/common/content_client.h"
 #include "google_apis/gaia/gaia_urls.h"
 #include "net/dns/mock_host_resolver.h"
--- a/chrome/browser/signin/signin_promo_util.cc
+++ b/chrome/browser/signin/signin_promo_util.cc
@@ -7,7 +7,6 @@
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/signin/identity_manager_factory.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/primary_account_mutator.h"
 #include "net/base/network_change_notifier.h"
@@ -35,7 +34,7 @@ bool ShouldShowPromo(Profile* profile) {
     return false;
 
   // Don't show if sign-in is not allowed.
-  if (!original_profile->GetPrefs()->GetBoolean(prefs::kSigninAllowed))
+  if (true)
     return false;
 
   // Display the signin promo if the user is not signed in.
--- a/chrome/browser/signin/signin_ui_util.cc
+++ b/chrome/browser/signin/signin_ui_util.cc
@@ -28,7 +28,6 @@
 #include "chrome/browser/ui/ui_features.h"
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/signin/public/identity_manager/accounts_in_cookie_jar_info.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
--- a/chrome/browser/signin/signin_util.cc
+++ b/chrome/browser/signin/signin_util.cc
@@ -27,7 +27,6 @@
 #include "components/google/core/common/google_util.h"
 #include "components/prefs/pref_service.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/identity_utils.h"
 #include "components/signin/public/identity_manager/primary_account_mutator.h"
@@ -217,7 +216,7 @@ void EnsurePrimaryAccountAllowedForProfi
     return;
 
   CoreAccountInfo primary_account = identity_manager->GetPrimaryAccountInfo();
-  if (profile->GetPrefs()->GetBoolean(prefs::kSigninAllowed) &&
+  if (false &&
       signin::IsUsernameAllowedByPatternFromPrefs(
           g_browser_process->local_state(), primary_account.email)) {
     return;
--- a/chrome/browser/signin/signin_util_win.cc
+++ b/chrome/browser/signin/signin_util_win.cc
@@ -29,7 +29,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/signin/core/browser/about_signin_internals.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/accounts_mutator.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 
@@ -89,9 +88,6 @@ void FinishImportCredentialsFromProvider
         signin_metrics::Reason::REASON_SIGNIN_PRIMARY_ACCOUNT, account_id,
         DiceTurnSyncOnHelper::SigninAbortedMode::KEEP_ACCOUNT);
   }
-
-  // Mark this profile as having been signed in with the credential provider.
-  profile->GetPrefs()->SetBoolean(prefs::kSignedInWithCredentialProvider, true);
 }
 
 // Start the process of importing credentials from the credential provider given
@@ -230,8 +226,7 @@ bool ReauthWithCredentialProviderIfPossi
   //  - The profile is already signed in.
   //  - The profile is in an auth error state.
   auto* identity_manager = IdentityManagerFactory::GetForProfile(profile);
-  if (!(profile->GetPrefs()->GetBoolean(
-            prefs::kSignedInWithCredentialProvider) &&
+  if (!(false &&
         identity_manager->HasPrimaryAccount() &&
         identity_manager->HasAccountWithRefreshTokenInPersistentErrorState(
             identity_manager->GetPrimaryAccountId()))) {
--- a/chrome/browser/signin/signin_util_win_browsertest.cc
+++ b/chrome/browser/signin/signin_util_win_browsertest.cc
@@ -26,7 +26,6 @@
 #include "chrome/test/base/in_process_browser_test.h"
 #include "chrome/test/base/testing_browser_process.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/identity_test_utils.h"
 #include "components/signin/public/identity_manager/primary_account_mutator.h"
--- a/chrome/browser/ssl/bad_clock_blocking_page.cc
+++ b/chrome/browser/ssl/bad_clock_blocking_page.cc
@@ -12,7 +12,6 @@
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/ssl/chrome_security_blocking_page_factory.h"
 #include "chrome/browser/ssl/ssl_error_controller_client.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/cert_report_helper.h"
 #include "components/security_interstitials/content/ssl_cert_reporter.h"
 #include "components/security_interstitials/core/bad_clock_ui.h"
--- a/chrome/browser/ssl/captive_portal_blocking_page.cc
+++ b/chrome/browser/ssl/captive_portal_blocking_page.cc
@@ -18,7 +18,6 @@
 #include "chrome/browser/ssl/ssl_error_controller_client.h"
 #include "components/captive_portal/captive_portal_detector.h"
 #include "components/captive_portal/captive_portal_metrics.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/cert_report_helper.h"
 #include "components/security_interstitials/content/ssl_cert_reporter.h"
 #include "components/security_interstitials/core/controller_client.h"
--- a/chrome/browser/ssl/certificate_reporting_test_utils.cc
+++ b/chrome/browser/ssl/certificate_reporting_test_utils.cc
@@ -15,7 +15,6 @@
 #include "build/build_config.h"
 #include "chrome/browser/profiles/profile.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/cert_report_helper.h"
 #include "components/security_interstitials/content/certificate_error_report.h"
 #include "components/variations/variations_associated_data.h"
--- a/chrome/browser/ssl/mitm_software_blocking_page.cc
+++ b/chrome/browser/ssl/mitm_software_blocking_page.cc
@@ -10,7 +10,6 @@
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/ssl/chrome_security_blocking_page_factory.h"
 #include "chrome/browser/ssl/ssl_error_controller_client.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/cert_report_helper.h"
 #include "components/security_interstitials/content/ssl_cert_reporter.h"
 #include "components/security_interstitials/core/metrics_helper.h"
--- a/chrome/browser/ssl/ssl_browsertest.cc
+++ b/chrome/browser/ssl/ssl_browsertest.cc
@@ -94,7 +94,6 @@
 #include "components/policy/core/common/policy_map.h"
 #include "components/policy/policy_constants.h"
 #include "components/prefs/testing_pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/cert_report_helper.h"
 #include "components/security_interstitials/content/security_interstitial_controller_client.h"
 #include "components/security_interstitials/content/security_interstitial_tab_helper.h"
--- a/chrome/browser/ssl/ssl_error_controller_client.cc
+++ b/chrome/browser/ssl/ssl_error_controller_client.cc
@@ -22,7 +22,6 @@
 #include "chrome/common/chrome_features.h"
 #include "chrome/common/pref_names.h"
 #include "chrome/common/url_constants.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/web_contents.h"
 
--- a/chrome/browser/supervised_user/supervised_user_pref_store.cc
+++ b/chrome/browser/supervised_user/supervised_user_pref_store.cc
@@ -21,7 +21,6 @@
 #include "chrome/common/pref_names.h"
 #include "components/ntp_snippets/pref_names.h"
 #include "components/prefs/pref_value_map.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "extensions/buildflags/buildflags.h"
 
 namespace {
@@ -57,9 +56,6 @@ SupervisedUserSettingsPrefMappingEntry k
         supervised_users::kSafeSitesEnabled, prefs::kSupervisedUserSafeSites,
     },
     {
-        supervised_users::kSigninAllowed, prefs::kSigninAllowed,
-    },
-    {
         supervised_users::kUserName, prefs::kProfileName,
     },
 };
@@ -127,7 +123,6 @@ void SupervisedUserPrefStore::OnNewSetti
     prefs_->SetInteger(prefs::kForceYouTubeRestrict,
                        safe_search_util::YOUTUBE_RESTRICT_MODERATE);
     prefs_->SetBoolean(prefs::kHideWebStoreIcon, true);
-    prefs_->SetBoolean(prefs::kSigninAllowed, false);
     prefs_->SetBoolean(ntp_snippets::prefs::kEnableSnippets, false);
 
     // Copy supervised user settings to prefs.
--- a/chrome/browser/ui/autofill/payments/save_card_bubble_controller_impl.cc
+++ b/chrome/browser/ui/autofill/payments/save_card_bubble_controller_impl.cc
@@ -39,7 +39,6 @@
 #include "components/autofill/core/common/autofill_prefs.h"
 #include "components/prefs/pref_service.h"
 #include "components/signin/public/base/signin_buildflags.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/strings/grit/components_strings.h"
 #include "components/sync/driver/sync_service.h"
@@ -362,9 +361,6 @@ bool SaveCardBubbleControllerImpl::Shoul
   if (is_upload_save_)
     return false;
 
-  if (!GetProfile()->GetPrefs()->GetBoolean(::prefs::kSigninAllowed))
-    return false;
-
   const syncer::SyncService* sync_service =
       ProfileSyncServiceFactory::GetForProfile(GetProfile());
 
--- a/chrome/browser/ui/browser_command_controller.cc
+++ b/chrome/browser/ui/browser_command_controller.cc
@@ -52,7 +52,6 @@
 #include "components/feature_engagement/buildflags.h"
 #include "components/prefs/pref_service.h"
 #include "components/sessions/core/tab_restore_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "content/public/browser/native_web_keyboard_event.h"
 #include "content/public/browser/navigation_controller.h"
 #include "content/public/browser/navigation_entry.h"
@@ -180,10 +179,6 @@ BrowserCommandController::BrowserCommand
       base::Bind(&BrowserCommandController::UpdateCommandsForFullscreenMode,
                  base::Unretained(this)));
 #endif
-  pref_signin_allowed_.Init(
-      prefs::kSigninAllowed, profile()->GetOriginalProfile()->GetPrefs(),
-      base::Bind(&BrowserCommandController::OnSigninAllowedPrefChange,
-                 base::Unretained(this)));
 
   InitCommandState();
 
@@ -1406,7 +1401,7 @@ void BrowserCommandController::UpdateSho
     return;
 
   command_updater_.UpdateCommandEnabled(
-      IDC_SHOW_SIGNIN, show_main_ui && pref_signin_allowed_.GetValue());
+      IDC_SHOW_SIGNIN, false);
 }
 
 // static
--- a/chrome/browser/ui/browser_command_controller.h
+++ b/chrome/browser/ui/browser_command_controller.h
@@ -212,7 +212,6 @@ class BrowserCommandController : public 
 
   PrefChangeRegistrar profile_pref_registrar_;
   PrefChangeRegistrar local_pref_registrar_;
-  BooleanPrefMember pref_signin_allowed_;
 
   // In locked fullscreen mode disallow enabling/disabling commands.
   bool is_locked_fullscreen_ = false;
--- a/chrome/browser/ui/browser_command_controller_unittest.cc
+++ b/chrome/browser/ui/browser_command_controller_unittest.cc
@@ -26,7 +26,6 @@
 #include "chrome/test/base/testing_browser_process.h"
 #include "chrome/test/base/testing_profile.h"
 #include "chrome/test/base/testing_profile_manager.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "content/public/browser/native_web_keyboard_event.h"
 #include "ui/events/keycodes/dom/dom_code.h"
 #include "ui/events/keycodes/keyboard_codes.h"
--- a/chrome/browser/ui/chrome_pages.cc
+++ b/chrome/browser/ui/chrome_pages.cc
@@ -70,7 +70,6 @@
 
 #if !defined(OS_ANDROID)
 #include "chrome/browser/signin/identity_manager_factory.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #endif
 
@@ -513,13 +512,7 @@ void ShowBrowserSignin(Browser* browser,
 
 void ShowBrowserSigninOrSettings(Browser* browser,
                                  signin_metrics::AccessPoint access_point) {
-  Profile* original_profile = browser->profile()->GetOriginalProfile();
-  DCHECK(original_profile->GetPrefs()->GetBoolean(prefs::kSigninAllowed));
-  if (IdentityManagerFactory::GetForProfile(original_profile)
-          ->HasPrimaryAccount())
-    ShowSettings(browser);
-  else
-    ShowBrowserSignin(browser, access_point);
+  ShowSettings(browser);
 }
 #endif
 
--- a/chrome/browser/ui/views/download/download_item_view.cc
+++ b/chrome/browser/ui/views/download/download_item_view.cc
@@ -50,7 +50,6 @@
 #include "components/download/public/common/download_item.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/features.h"
 #include "components/url_formatter/elide_url.h"
 #include "components/vector_icons/vector_icons.h"
--- a/chrome/browser/ui/views/page_info/page_info_bubble_view_sync_browsertest.cc
+++ b/chrome/browser/ui/views/page_info/page_info_bubble_view_sync_browsertest.cc
@@ -17,7 +17,6 @@
 #include "chrome/test/base/ui_test_utils.h"
 #include "components/password_manager/core/browser/password_manager_metrics_util.h"
 #include "components/safe_browsing/password_protection/metrics_util.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/identity_test_utils.h"
--- a/chrome/browser/ui/views/profiles/profile_menu_view.cc
+++ b/chrome/browser/ui/views/profiles/profile_menu_view.cc
@@ -46,7 +46,6 @@
 #include "chrome/grit/generated_resources.h"
 #include "chrome/grit/theme_resources.h"
 #include "components/signin/core/browser/signin_error_controller.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/accounts_mutator.h"
 #include "components/signin/public/identity_manager/primary_account_mutator.h"
 #include "components/strings/grit/components_strings.h"
@@ -539,11 +538,6 @@ void ProfileMenuView::BuildAutofillButto
 
 void ProfileMenuView::BuildSyncInfo() {
   Profile* profile = browser()->profile();
-  // Only show the sync info if signin and sync are allowed.
-  if (!profile->GetPrefs()->GetBoolean(prefs::kSigninAllowed) ||
-      !profile->IsSyncAllowed()) {
-    return;
-  }
 
   signin::IdentityManager* identity_manager =
       IdentityManagerFactory::GetForProfile(profile);
@@ -910,12 +904,6 @@ void ProfileMenuView::AddCurrentProfileV
         IDS_PROFILES_EDIT_SIGNED_IN_PROFILE_ACCESSIBLE_NAME, profile_name,
         avatar_item.username));
   } else {
-    bool is_signin_allowed =
-        profile->GetPrefs()->GetBoolean(prefs::kSigninAllowed);
-    // For the dice promo equivalent, see AddDiceSigninPromo() call sites.
-    if (!dice_enabled_ && is_signin_allowed)
-      AddPreDiceSigninPromo();
-
     current_profile_card->SetAccessibleName(l10n_util::GetStringFUTF16(
         IDS_PROFILES_EDIT_PROFILE_ACCESSIBLE_NAME, profile_name));
   }
--- a/chrome/browser/ui/views/profiles/profile_menu_view_browsertest.cc
+++ b/chrome/browser/ui/views/profiles/profile_menu_view_browsertest.cc
@@ -48,7 +48,6 @@
 #include "chrome/test/base/ui_test_utils.h"
 #include "components/autofill/core/common/autofill_payments_features.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_test_utils.h"
 #include "components/sync/driver/sync_service.h"
 #include "components/sync/driver/sync_user_settings.h"
--- a/chrome/browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog.cc
+++ b/chrome/browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog.cc
@@ -134,7 +134,6 @@ PasswordReuseModalWarningDialog::Passwor
     OnWarningDone done_callback)
     : content::WebContentsObserver(web_contents),
       done_callback_(std::move(done_callback)),
-      service_(service),
       url_(web_contents->GetLastCommittedURL()),
       password_type_(password_type) {
   DialogDelegate::set_button_label(ui::DIALOG_BUTTON_OK,
@@ -143,30 +142,14 @@ PasswordReuseModalWarningDialog::Passwor
       ui::DIALOG_BUTTON_CANCEL,
       l10n_util::GetStringUTF16(IDS_PAGE_INFO_IGNORE_PASSWORD_WARNING_BUTTON));
 
-  // |service| maybe NULL in tests.
-  if (service_)
-    service_->AddObserver(this);
-
   std::vector<size_t> placeholder_offsets;
 
-  if (password_type.account_type() ==
-      ReusedPasswordAccountType::SAVED_PASSWORD) {
-    const base::string16 message_body =
-        service_->GetWarningDetailText(password_type, &placeholder_offsets);
-
-    CreateSavedPasswordReuseModalWarningDialog(
-        message_body, service_->GetPlaceholdersForSavedPasswordWarningText(),
-        placeholder_offsets);
-  } else {
-    views::Label* message_body_label = CreateMessageBodyLabel(
-        l10n_util::GetStringUTF16(IDS_PAGE_INFO_CHANGE_PASSWORD_DETAILS));
-    CreateGaiaPasswordReuseModalWarningDialog(message_body_label);
-  }
+  views::Label* message_body_label = CreateMessageBodyLabel(
+      l10n_util::GetStringUTF16(IDS_PAGE_INFO_CHANGE_PASSWORD_DETAILS));
+  CreateGaiaPasswordReuseModalWarningDialog(message_body_label);
 }
 
 PasswordReuseModalWarningDialog::~PasswordReuseModalWarningDialog() {
-  if (service_)
-    service_->RemoveObserver(this);
 }
 
 void PasswordReuseModalWarningDialog::
--- a/chrome/browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog.h
+++ b/chrome/browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog.h
@@ -63,7 +63,6 @@ class PasswordReuseModalWarningDialog
 
  private:
   OnWarningDone done_callback_;
-  ChromePasswordProtectionService* service_;
   const GURL url_;
   const ReusedPasswordAccountType password_type_;
 
--- a/chrome/browser/ui/views/sync/inline_login_ui_browsertest.cc
+++ b/chrome/browser/ui/views/sync/inline_login_ui_browsertest.cc
@@ -43,7 +43,6 @@
 #include "components/keyed_service/content/browser_context_dependency_manager.h"
 #include "components/prefs/pref_service.h"
 #include "components/prefs/scoped_user_pref_update.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_test_utils.h"
 #include "content/public/browser/render_frame_host.h"
 #include "content/public/browser/render_process_host.h"
--- a/chrome/browser/ui/webui/app_launcher_login_handler.cc
+++ b/chrome/browser/ui/webui/app_launcher_login_handler.cc
@@ -30,7 +30,6 @@
 #include "chrome/grit/generated_resources.h"
 #include "components/prefs/pref_service.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "content/public/browser/web_contents.h"
 #include "content/public/browser/web_ui.h"
@@ -166,10 +165,7 @@ void AppLauncherLoginHandler::UpdateLogi
   } else {
 #if !defined(OS_CHROMEOS)
     // Chromeos does not show this status header.
-    bool is_signin_allowed =
-        profile->GetOriginalProfile()->GetPrefs()->GetBoolean(
-            prefs::kSigninAllowed);
-    if (!profile->IsLegacySupervised() && is_signin_allowed) {
+    if (!profile->IsLegacySupervised() && false) {
       base::string16 signed_in_link = l10n_util::GetStringUTF16(
           IDS_SYNC_PROMO_NOT_SIGNED_IN_STATUS_LINK);
       signed_in_link =
@@ -207,8 +203,6 @@ bool AppLauncherLoginHandler::ShouldShow
   // UI and the avatar menu don't exist on that platform.
   return false;
 #else
-  bool is_signin_allowed =
-      profile->GetPrefs()->GetBoolean(prefs::kSigninAllowed);
-  return !profile->IsOffTheRecord() && is_signin_allowed;
+  return false;
 #endif
 }
--- a/chrome/browser/ui/webui/downloads/downloads_dom_handler.cc
+++ b/chrome/browser/ui/webui/downloads/downloads_dom_handler.cc
@@ -37,7 +37,6 @@
 #include "chrome/common/url_constants.h"
 #include "components/download/public/common/download_item.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/download_manager.h"
 #include "content/public/browser/render_process_host.h"
--- a/chrome/browser/ui/webui/management_ui_handler.cc
+++ b/chrome/browser/ui/webui/management_ui_handler.cc
@@ -24,7 +24,6 @@
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/common/pref_names.h"
 
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/strings/grit/components_strings.h"
 #include "content/public/browser/storage_partition.h"
 #include "content/public/browser/web_contents.h"
@@ -595,34 +594,6 @@ base::Value ManagementUIHandler::GetThre
   const policy::PolicyService* policy_service = GetPolicyService();
   const auto& chrome_policies = policy_service->GetPolicies(
       policy::PolicyNamespace(policy::POLICY_DOMAIN_CHROME, std::string()));
-  // CheckContentCompliance is a int-enum policy. The accepted values are
-  // defined in the enum CheckContentComplianceValues.
-  auto* check_content_compliance_value =
-      chrome_policies.GetValue(policy::key::kCheckContentCompliance);
-  if (check_content_compliance_value &&
-      check_content_compliance_value->GetInt() > safe_browsing::CHECK_NONE &&
-      check_content_compliance_value->GetInt() <=
-          safe_browsing::CHECK_CONTENT_COMPLIANCE_MAX) {
-    base::Value value(base::Value::Type::DICTIONARY);
-    value.SetStringKey("title", kManagementDataLossPreventionName);
-    value.SetStringKey("permission", kManagementDataLossPreventionPermissions);
-    info.Append(std::move(value));
-  }
-
-  // SendFilesForMalwareCheck is a int-enum policy. The accepted values are
-  // defined in the enum SendFilesForMalwareCheckValues.
-  auto* send_files_for_malware_check_value =
-      chrome_policies.GetValue(policy::key::kSendFilesForMalwareCheck);
-  if (send_files_for_malware_check_value &&
-      send_files_for_malware_check_value->GetInt() >
-          safe_browsing::DO_NOT_SCAN &&
-      send_files_for_malware_check_value->GetInt() <=
-          safe_browsing::SEND_FILES_FOR_MALWARE_CHECK_MAX) {
-    base::Value value(base::Value::Type::DICTIONARY);
-    value.SetStringKey("title", kManagementMalwareScanningName);
-    value.SetStringKey("permission", kManagementMalwareScanningPermissions);
-    info.Append(std::move(value));
-  }
 
   auto* unsafe_event_reporting_value =
       chrome_policies.GetValue(policy::key::kUnsafeEventsReportingEnabled);
--- a/chrome/browser/ui/webui/profile_info_watcher.cc
+++ b/chrome/browser/ui/webui/profile_info_watcher.cc
@@ -12,7 +12,6 @@
 #include "chrome/browser/signin/identity_manager_factory.h"
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 
 ProfileInfoWatcher::ProfileInfoWatcher(
@@ -25,9 +24,6 @@ ProfileInfoWatcher::ProfileInfoWatcher(
   // The profile_manager might be NULL in testing environments.
   if (profile_manager)
     profile_manager->GetProfileAttributesStorage().AddObserver(this);
-
-  signin_allowed_pref_.Init(prefs::kSigninAllowed, profile_->GetPrefs(),
-      base::Bind(&ProfileInfoWatcher::RunCallback, base::Unretained(this)));
 }
 
 ProfileInfoWatcher::~ProfileInfoWatcher() {
--- a/chrome/browser/ui/webui/profile_info_watcher.h
+++ b/chrome/browser/ui/webui/profile_info_watcher.h
@@ -45,8 +45,6 @@ class ProfileInfoWatcher : public Profil
   // Called when the authenticated username changes.
   base::Closure callback_;
 
-  BooleanPrefMember signin_allowed_pref_;
-
   DISALLOW_COPY_AND_ASSIGN(ProfileInfoWatcher);
 };
 
--- a/chrome/browser/ui/webui/reset_password/reset_password_ui.cc
+++ b/chrome/browser/ui/webui/reset_password/reset_password_ui.cc
@@ -14,7 +14,6 @@
 #include "chrome/browser/ui/webui/reset_password/reset_password.mojom.h"
 #include "chrome/common/url_constants.h"
 #include "chrome/grit/browser_resources.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/password_protection/metrics_util.h"
 #include "components/safe_browsing/password_protection/password_protection_service.h"
 #include "components/safe_browsing/proto/csd.pb.h"
--- a/chrome/browser/ui/webui/settings/change_password_handler.cc
+++ b/chrome/browser/ui/webui/settings/change_password_handler.cc
@@ -23,8 +23,7 @@ using safe_browsing::RequestOutcome;
 ChangePasswordHandler::ChangePasswordHandler(
     Profile* profile,
     safe_browsing::ChromePasswordProtectionService* service)
-    : profile_(profile), service_(service) {
-  DCHECK(service_);
+    : profile_(profile) {
 }
 
 ChangePasswordHandler::~ChangePasswordHandler() {}
@@ -42,10 +41,6 @@ void ChangePasswordHandler::RegisterMess
 
 void ChangePasswordHandler::OnJavascriptAllowed() {
   pref_registrar_.Init(profile_->GetPrefs());
-  pref_registrar_.Add(
-      prefs::kSafeBrowsingUnhandledGaiaPasswordReuses,
-      base::Bind(&ChangePasswordHandler::UpdateChangePasswordCardVisibility,
-                 base::Unretained(this)));
 }
 
 void ChangePasswordHandler::OnJavascriptDisallowed() {
@@ -58,24 +53,12 @@ void ChangePasswordHandler::HandleInitia
 }
 
 void ChangePasswordHandler::HandleChangePassword(const base::ListValue* args) {
-  service_->OnUserAction(
-      web_ui()->GetWebContents(),
-      service_->reused_password_account_type_for_last_shown_warning(),
-      RequestOutcome::UNKNOWN,
-      LoginReputationClientResponse::VERDICT_TYPE_UNSPECIFIED, "unused_token",
-      safe_browsing::WarningUIType::CHROME_SETTINGS,
-      safe_browsing::WarningAction::CHANGE_PASSWORD);
 }
 
 void ChangePasswordHandler::UpdateChangePasswordCardVisibility() {
   FireWebUIListener(
       "change-password-visibility",
-      base::Value(
-          service_->IsWarningEnabled(
-              service_
-                  ->reused_password_account_type_for_last_shown_warning()) &&
-          safe_browsing::ChromePasswordProtectionService::
-              ShouldShowChangePasswordSettingUI(profile_)));
+      base::Value(true));
 }
 
 }  // namespace settings
--- a/chrome/browser/ui/webui/settings/change_password_handler.h
+++ b/chrome/browser/ui/webui/settings/change_password_handler.h
@@ -41,8 +41,6 @@ class ChangePasswordHandler : public Set
 
   PrefChangeRegistrar pref_registrar_;
 
-  safe_browsing::ChromePasswordProtectionService* service_;
-
   DISALLOW_COPY_AND_ASSIGN(ChangePasswordHandler);
 };
 
--- a/chrome/browser/ui/webui/settings/people_handler.cc
+++ b/chrome/browser/ui/webui/settings/people_handler.cc
@@ -37,7 +37,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/signin/core/browser/signin_error_controller.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/accounts_mutator.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/primary_account_mutator.h"
@@ -342,9 +341,6 @@ void PeopleHandler::RegisterMessages() {
 void PeopleHandler::OnJavascriptAllowed() {
   PrefService* prefs = profile_->GetPrefs();
   profile_pref_registrar_.Init(prefs);
-  profile_pref_registrar_.Add(
-      prefs::kSigninAllowed,
-      base::Bind(&PeopleHandler::UpdateSyncStatus, base::Unretained(this)));
 
   signin::IdentityManager* identity_manager(
       IdentityManagerFactory::GetInstance()->GetForProfile(profile_));
@@ -891,7 +887,7 @@ std::unique_ptr<base::DictionaryValue> P
       service && service->HasDisableReason(
                      syncer::SyncService::DISABLE_REASON_ENTERPRISE_POLICY);
   sync_status->SetBoolean(
-      "signinAllowed", profile_->GetPrefs()->GetBoolean(prefs::kSigninAllowed));
+      "signinAllowed", false);
   sync_status->SetBoolean("syncSystemEnabled", (service != nullptr));
   sync_status->SetBoolean(
       "firstSetupInProgress",
--- a/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
+++ b/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
@@ -54,7 +54,6 @@
 #include "components/omnibox/common/omnibox_features.h"
 #include "components/password_manager/core/browser/manage_passwords_referrer.h"
 #include "components/password_manager/core/common/password_manager_features.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/signin/public/base/signin_buildflags.h"
 #include "components/strings/grit/components_strings.h"
 #include "components/subresource_filter/core/browser/subresource_filter_features.h"
@@ -2557,14 +2556,6 @@ void AddPrivacyStrings(content::WebUIDat
       {"clearBrowsingData", IDS_SETTINGS_CLEAR_BROWSING_DATA},
       {"clearBrowsingDataDescription", IDS_SETTINGS_CLEAR_DATA_DESCRIPTION},
       {"titleAndCount", IDS_SETTINGS_TITLE_AND_COUNT},
-      {"safeBrowsingEnableExtendedReporting",
-       IDS_SETTINGS_SAFEBROWSING_ENABLE_REPORTING},
-      {"safeBrowsingEnableExtendedReportingDesc",
-       IDS_SETTINGS_SAFEBROWSING_ENABLE_REPORTING_DESC},
-      {"safeBrowsingEnableProtection",
-       IDS_SETTINGS_SAFEBROWSING_ENABLEPROTECTION},
-      {"safeBrowsingEnableProtectionDesc",
-       IDS_SETTINGS_SAFEBROWSING_ENABLEPROTECTION_DESC},
       {"syncAndGoogleServicesPrivacyDescription",
        IDS_SETTINGS_SYNC_AND_GOOGLE_SERVICES_PRIVACY_DESC_UNIFIED_CONSENT},
       {"urlKeyedAnonymizedDataCollection",
@@ -3140,11 +3131,6 @@ void AddSiteSettingsStrings(content::Web
   AddLocalizedStringsBulk(html_source, kSensorsLocalizedStrings);
 
   html_source->AddBoolean(
-      "enableSafeBrowsingSubresourceFilter",
-      base::FeatureList::IsEnabled(
-          subresource_filter::kSafeBrowsingSubresourceFilter));
-
-  html_source->AddBoolean(
       "enableBlockAutoplayContentSetting",
       base::FeatureList::IsEnabled(media::kAutoplayDisableSettings));
 
--- a/chrome/browser/ui/webui/signin/dice_turn_sync_on_helper.cc
+++ b/chrome/browser/ui/webui/signin/dice_turn_sync_on_helper.cc
@@ -37,7 +37,6 @@
 #include "components/policy/core/common/cloud/user_cloud_policy_manager.h"
 #include "components/prefs/pref_service.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/accounts_mutator.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/primary_account_mutator.h"
@@ -189,8 +188,7 @@ DiceTurnSyncOnHelper::DiceTurnSyncOnHelp
   // last authenticated account of the current profile, then Chrome will show a
   // confirmation dialog before starting sync.
   // TODO(skym): Warn for high risk upgrade scenario (https://crbug.com/572754).
-  std::string last_email =
-      profile_->GetPrefs()->GetString(prefs::kGoogleServicesLastUsername);
+  std::string last_email;
   delegate_->ShowMergeSyncDataConfirmation(
       last_email, account_info_.email,
       base::BindOnce(&DiceTurnSyncOnHelper::OnMergeAccountConfirmation,
--- a/chrome/browser/ui/webui/signin/dice_turn_sync_on_helper_unittest.cc
+++ b/chrome/browser/ui/webui/signin/dice_turn_sync_on_helper_unittest.cc
@@ -29,7 +29,6 @@
 #include "components/account_id/account_id.h"
 #include "components/prefs/pref_service.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/identity_test_environment.h"
 #include "components/sync/driver/mock_sync_service.h"
--- a/chrome/browser/ui/webui/signin/inline_login_handler.cc
+++ b/chrome/browser/ui/webui/signin/inline_login_handler.cc
@@ -26,7 +26,6 @@
 #include "chrome/common/pref_names.h"
 #include "components/metrics/metrics_pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "content/public/browser/storage_partition.h"
 #include "content/public/browser/web_contents.h"
 #include "content/public/browser/web_ui.h"
@@ -130,8 +129,6 @@ void InlineLoginHandler::ContinueHandleI
   std::string default_email;
   if (reason == signin_metrics::Reason::REASON_SIGNIN_PRIMARY_ACCOUNT ||
       reason == signin_metrics::Reason::REASON_FORCED_SIGNIN_PRIMARY_ACCOUNT) {
-    default_email =
-        profile->GetPrefs()->GetString(prefs::kGoogleServicesLastUsername);
   } else {
     if (!net::GetValueForKeyInQuery(current_url, "email", &default_email))
       default_email.clear();
--- a/chrome/browser/ui/webui/signin/inline_login_handler_impl.cc
+++ b/chrome/browser/ui/webui/signin/inline_login_handler_impl.cc
@@ -59,7 +59,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/signin/core/browser/about_signin_internals.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/accounts_cookie_mutator.h"
 #include "components/signin/public/identity_manager/accounts_mutator.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
@@ -256,11 +255,6 @@ void OnSyncSetupComplete(Profile* profil
     scoped_refptr<password_manager::PasswordStore> password_store =
         PasswordStoreFactory::GetForProfile(profile,
                                             ServiceAccessType::EXPLICIT_ACCESS);
-    password_store->SaveGaiaPasswordHash(
-        username, base::UTF8ToUTF16(password),
-        /*is_primary_account_=*/true,
-        password_manager::metrics_util::GaiaPasswordHashChange::
-            SAVED_ON_CHROME_SIGNIN);
 
     if (profiles::IsLockAvailable(profile))
       LocalAuth::SetLocalAuthCredentials(profile, password);
--- a/chrome/browser/ui/webui/signin/signin_error_ui.cc
+++ b/chrome/browser/ui/webui/signin/signin_error_ui.cc
@@ -22,7 +22,6 @@
 #include "chrome/grit/browser_resources.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/strings/grit/components_strings.h"
 #include "content/public/browser/web_ui.h"
 #include "content/public/browser/web_ui_data_source.h"
@@ -106,9 +105,7 @@ void SigninErrorUI::Initialize(Browser* 
   if (is_profile_blocked) {
     source->AddLocalizedString("profileBlockedMessage",
                                IDS_OLD_PROFILES_DISABLED_MESSAGE);
-    std::string allowed_domain = signin_ui_util::GetAllowedDomain(
-        g_browser_process->local_state()->GetString(
-            prefs::kGoogleServicesUsernamePattern));
+    std::string allowed_domain;
     if (allowed_domain.empty()) {
       source->AddLocalizedString(
           "profileBlockedAddPersonSuggestion",
--- a/chrome/browser/ui/webui/signin/signin_utils_desktop.cc
+++ b/chrome/browser/ui/webui/signin/signin_utils_desktop.cc
@@ -18,7 +18,6 @@
 #include "chrome/grit/chromium_strings.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/guest_view/browser/guest_view_manager.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/signin/public/identity_manager/identity_utils.h"
 #include "google_apis/gaia/gaia_auth_util.h"
@@ -35,7 +34,7 @@ bool CanOfferSignin(Profile* profile,
   if (!profile)
     return false;
 
-  if (!profile->GetPrefs()->GetBoolean(prefs::kSigninAllowed))
+  if (true)
     return false;
 
   if (!ChromeSigninClient::ProfileAllowsSigninCookies(profile))
@@ -110,8 +109,7 @@ bool CanOfferSignin(Profile* profile,
     if (signin_util::IsForceSigninEnabled() &&
         IsCrossAccountError(profile, email, gaia_id)) {
       if (error_message) {
-        std::string last_email =
-            profile->GetPrefs()->GetString(prefs::kGoogleServicesLastUsername);
+        std::string last_email;
         error_message->assign(l10n_util::GetStringFUTF8(
             IDS_SYNC_USED_PROFILE_ERROR, base::UTF8ToUTF16(last_email)));
       }
--- a/chrome/browser/ui/webui/welcome/welcome_ui.cc
+++ b/chrome/browser/ui/webui/welcome/welcome_ui.cc
@@ -22,7 +22,6 @@
 #include "chrome/grit/welcome_resources.h"
 #include "chrome/grit/welcome_resources_map.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/strings/grit/components_strings.h"
 #include "net/base/url_util.h"
 
@@ -189,7 +188,7 @@ WelcomeUI::WelcomeUI(content::WebUI* web
       "returningUserModules",
       welcome::GetModules(profile).FindKey("returning-user")->GetString());
   html_source->AddBoolean(
-      "signinAllowed", profile->GetPrefs()->GetBoolean(prefs::kSigninAllowed));
+      "signinAllowed", false);
   html_source->SetRequestFilter(
       base::BindRepeating(&ShouldHandleRequestCallback,
                           weak_ptr_factory_.GetWeakPtr()),
--- a/chrome/browser/unified_consent/unified_consent_service_factory.cc
+++ b/chrome/browser/unified_consent/unified_consent_service_factory.cc
@@ -12,7 +12,6 @@
 #include "chrome/common/pref_names.h"
 #include "components/keyed_service/content/browser_context_dependency_manager.h"
 #include "components/prefs/pref_registry_simple.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/spellcheck/browser/pref_names.h"
 #include "components/sync_preferences/pref_service_syncable.h"
 #include "components/unified_consent/unified_consent_metrics.h"
@@ -34,7 +33,6 @@ namespace {
 std::vector<std::string> GetSyncedServicePrefNames() {
   return {
     prefs::kSearchSuggestEnabled, prefs::kAlternateErrorPagesEnabled,
-        prefs::kSafeBrowsingEnabled, prefs::kSafeBrowsingScoutReportingEnabled,
         spellcheck::prefs::kSpellCheckUseSpellingService,
 #if defined(OS_ANDROID)
         prefs::kContextualSearchEnabled
--- a/chrome/common/extensions/api/privacy.json
+++ b/chrome/common/extensions/api/privacy.json
@@ -75,16 +75,6 @@
             "value": ["passwordSavingEnabled", {"type":"boolean"}],
             "description": "If enabled, the password manager will ask if you want to save passwords. This preference's value is a boolean, defaulting to <code>true</code>."
           },
-          "safeBrowsingEnabled": {
-            "$ref": "types.ChromeSetting",
-            "value": ["safeBrowsingEnabled", {"type":"boolean"}],
-            "description": "If enabled, Chrome does its best to protect you from phishing and malware. This preference's value is a boolean, defaulting to <code>true</code>."
-          },
-          "safeBrowsingExtendedReportingEnabled": {
-            "$ref": "types.ChromeSetting",
-            "value": ["safeBrowsingExtendedReportingEnabled", {"type":"boolean"}],
-            "description": "If enabled, Chrome will send additional information to Google when SafeBrowsing blocks a page, such as the content of the blocked page. This preference's value is a boolean, defaulting to <code>false</code>."
-          },
           "searchSuggestEnabled": {
             "$ref": "types.ChromeSetting",
             "value": ["searchSuggestEnabled", {"type":"boolean"}],
--- a/components/password_manager/core/browser/BUILD.gn
+++ b/components/password_manager/core/browser/BUILD.gn
@@ -12,7 +12,7 @@ if (is_android) {
 
 # TODO(crbug.com/1006430): Fix password reuse detection not fully functional on
 # Android.
-password_reuse_detection_support = !is_ios
+password_reuse_detection_support = false
 password_reuse_warning_support = !is_android && !is_ios
 password_on_focus_ping_support = !is_ios
 
--- a/components/password_manager/core/browser/leak_detection_delegate.cc
+++ b/components/password_manager/core/browser/leak_detection_delegate.cc
@@ -19,7 +19,6 @@
 #include "components/password_manager/core/common/password_manager_features.h"
 #include "components/password_manager/core/common/password_manager_pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "services/network/public/cpp/shared_url_loader_factory.h"
 
 namespace password_manager {
@@ -51,12 +50,6 @@ void LeakDetectionDelegate::StartLeakChe
     LogString(client_, Logger::STRING_LEAK_DETECTION_DISABLED_FEATURE);
     return;
   }
-#if !defined(OS_IOS)
-  if (!client_->GetPrefs()->GetBoolean(::prefs::kSafeBrowsingEnabled)) {
-    LogString(client_, Logger::STRING_LEAK_DETECTION_DISABLED_SAFE_BROWSING);
-    return;
-  }
-#endif
   if (form.username_value.empty())
     return;
 
--- a/components/password_manager/core/browser/password_bubble_experiment.cc
+++ b/components/password_manager/core/browser/password_bubble_experiment.cc
@@ -14,7 +14,6 @@
 #include "components/pref_registry/pref_registry_syncable.h"
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/sync/driver/sync_service.h"
 #include "components/sync/driver/sync_user_settings.h"
 
@@ -61,8 +60,6 @@ bool ShouldShowChromeSignInPasswordPromo
 #if defined(OS_CHROMEOS)
   return false;
 #else
-  if (!prefs->GetBoolean(prefs::kSigninAllowed))
-    return false;
 
   if (!sync_service ||
       sync_service->HasDisableReason(
--- a/components/password_manager/core/browser/password_reuse_detector.cc
+++ b/components/password_manager/core/browser/password_reuse_detector.cc
@@ -13,7 +13,6 @@
 #include "components/password_manager/core/browser/password_hash_data.h"
 #include "components/password_manager/core/browser/password_reuse_detector_consumer.h"
 #include "components/password_manager/core/browser/psl_matching_helper.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "google_apis/gaia/gaia_auth_util.h"
 #include "google_apis/gaia/gaia_urls.h"
 #include "url/origin.h"
--- a/components/password_manager/core/browser/password_store.cc
+++ b/components/password_manager/core/browser/password_store.cc
@@ -41,7 +41,6 @@
 #if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
 #include "base/strings/string16.h"
 #include "components/password_manager/core/browser/password_store_signin_notifier.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #endif
 
 using autofill::PasswordForm;
--- a/components/password_manager/core/browser/password_sync_util.cc
+++ b/components/password_manager/core/browser/password_sync_util.cc
@@ -15,7 +15,6 @@
 #include "url/origin.h"
 
 #if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #endif  // SYNC_PASSWORD_REUSE_DETECTION_ENABLED
 
 using autofill::PasswordForm;
--- a/components/password_manager/core/browser/password_sync_util_unittest.cc
+++ b/components/password_manager/core/browser/password_sync_util_unittest.cc
@@ -16,7 +16,6 @@
 #include "testing/gtest/include/gtest/gtest.h"
 
 #if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
-#include "components/safe_browsing/common/safe_browsing_prefs.h"  // nogncheck
 #endif  // SYNC_PASSWORD_REUSE_DETECTION_ENABLED
 
 using autofill::PasswordForm;
--- a/components/password_manager/core/browser/sync_credentials_filter_unittest.cc
+++ b/components/password_manager/core/browser/sync_credentials_filter_unittest.cc
@@ -32,7 +32,6 @@
 #include "testing/gtest/include/gtest/gtest.h"
 
 #if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
-#include "components/safe_browsing/common/safe_browsing_prefs.h"  // nogncheck
 #endif  // SYNC_PASSWORD_REUSE_DETECTION_ENABLED
 
 using autofill::PasswordForm;
--- a/components/policy/core/common/policy_loader_win.cc
+++ b/components/policy/core/common/policy_loader_win.cc
@@ -75,9 +75,6 @@ const char* kInsecurePolicies[] = {
     key::kPasswordProtectionLoginURLs,
     key::kRestoreOnStartup,
     key::kRestoreOnStartupURLs,
-    key::kSafeBrowsingForTrustedSourcesEnabled,
-    key::kSafeBrowsingEnabled,
-    key::kSafeBrowsingWhitelistDomains,
 };
 
 // The list of possible errors that can occur while collecting information about
--- a/components/safe_browsing/base_blocking_page.cc
+++ b/components/safe_browsing/base_blocking_page.cc
@@ -11,7 +11,6 @@
 #include "base/lazy_instance.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/time/time.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/features.h"
 #include "components/safe_browsing/safe_browsing_controller_client.h"
 #include "components/security_interstitials/content/security_interstitial_controller_client.h"
--- a/components/safe_browsing/common/BUILD.gn
+++ b/components/safe_browsing/common/BUILD.gn
@@ -32,20 +32,8 @@ source_set("common") {
   ]
 }
 
-static_library("safe_browsing_prefs") {
-  sources = [
-    "safe_browsing_prefs.cc",
-    "safe_browsing_prefs.h",
-  ]
-
-  deps = [
-    "//base:base",
-    "//components/pref_registry:pref_registry",
-    "//components/prefs",
-    "//components/safe_browsing:features",
-    "//content/public/browser:browser",
-    "//net:net",
-  ]
+group("safe_browsing_prefs") {
+  # SafeBrowsing prefs are disabled
 }
 
 source_set("unit_tests") {
--- a/components/safe_browsing/common/safe_browsing_prefs_unittest.cc
+++ b/components/safe_browsing/common/safe_browsing_prefs_unittest.cc
@@ -12,7 +12,6 @@
 #include "build/build_config.h"
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/testing_pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/features.h"
 #include "content/public/test/browser_task_environment.h"
 #include "testing/gtest/include/gtest/gtest.h"
--- a/components/safe_browsing/db/hit_report.h
+++ b/components/safe_browsing/db/hit_report.h
@@ -7,7 +7,6 @@
 #ifndef COMPONENTS_SAFE_BROWSING_DB_HIT_REPORT_H_
 #define COMPONENTS_SAFE_BROWSING_DB_HIT_REPORT_H_
 
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/db/util.h"
 #include "url/gurl.h"
 
@@ -44,7 +43,6 @@ struct HitReport {
   // NOTE(vakh): Unused at the moment, but may be used later.
   std::string population_id;
 
-  ExtendedReportingLevel extended_reporting_level;
   bool is_metrics_reporting_active;
 
   std::string post_data;
--- a/components/safe_browsing/db/util.h
+++ b/components/safe_browsing/db/util.h
@@ -18,7 +18,6 @@
 #include "base/strings/string_piece.h"
 #include "base/time/time.h"
 #include "base/trace_event/traced_value.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/db/v4_protocol_manager_util.h"
 
 namespace safe_browsing {
--- a/components/safe_browsing/db/v4_local_database_manager.cc
+++ b/components/safe_browsing/db/v4_local_database_manager.cc
@@ -231,10 +231,9 @@ const V4LocalDatabaseManager*
 
 // static
 scoped_refptr<V4LocalDatabaseManager> V4LocalDatabaseManager::Create(
-    const base::FilePath& base_path,
-    ExtendedReportingLevelCallback extended_reporting_level_callback) {
+    const base::FilePath& base_path) {
   return base::WrapRefCounted(new V4LocalDatabaseManager(
-      base_path, extended_reporting_level_callback, nullptr));
+      base_path, nullptr));
 }
 
 void V4LocalDatabaseManager::CollectDatabaseManagerInfo(
@@ -256,10 +255,8 @@ void V4LocalDatabaseManager::CollectData
 
 V4LocalDatabaseManager::V4LocalDatabaseManager(
     const base::FilePath& base_path,
-    ExtendedReportingLevelCallback extended_reporting_level_callback,
     scoped_refptr<base::SequencedTaskRunner> task_runner_for_tests)
     : base_path_(base_path),
-      extended_reporting_level_callback_(extended_reporting_level_callback),
       list_infos_(GetListInfos()),
       task_runner_(task_runner_for_tests
                        ? task_runner_for_tests
@@ -1017,8 +1014,7 @@ void V4LocalDatabaseManager::SetupUpdate
                  weak_factory_.GetWeakPtr());
 
   v4_update_protocol_manager_ = V4UpdateProtocolManager::Create(
-      url_loader_factory, config, update_callback,
-      extended_reporting_level_callback_);
+      url_loader_factory, config, update_callback);
 }
 
 void V4LocalDatabaseManager::UpdateRequestCompleted(
--- a/components/safe_browsing/db/v4_local_database_manager.h
+++ b/components/safe_browsing/db/v4_local_database_manager.h
@@ -34,8 +34,7 @@ class V4LocalDatabaseManager : public Sa
   // Create and return an instance of V4LocalDatabaseManager, if Finch trial
   // allows it; nullptr otherwise.
   static scoped_refptr<V4LocalDatabaseManager> Create(
-      const base::FilePath& base_path,
-      ExtendedReportingLevelCallback extended_reporting_level_callback);
+      const base::FilePath& base_path);
 
   // Populates the protobuf with the database data.
   void CollectDatabaseManagerInfo(
@@ -102,7 +101,6 @@ class V4LocalDatabaseManager : public Sa
   // Must be initialized by calling StartOnIOThread() before using.
   V4LocalDatabaseManager(
       const base::FilePath& base_path,
-      ExtendedReportingLevelCallback extended_reporting_level_callback,
       scoped_refptr<base::SequencedTaskRunner> task_runner_for_tests);
 
   ~V4LocalDatabaseManager() override;
@@ -352,10 +350,6 @@ class V4LocalDatabaseManager : public Sa
   // ready to process next update.
   DatabaseUpdatedCallback db_updated_callback_;
 
-  // Callback to get the current extended reporting level. Needed by the update
-  // manager.
-  ExtendedReportingLevelCallback extended_reporting_level_callback_;
-
   // The client_state of each list currently being synced. This is updated each
   // time a database update completes, and used to send list client_state
   // information in the full hash request.
--- a/components/safe_browsing/db/v4_protocol_manager_util.cc
+++ b/components/safe_browsing/db/v4_protocol_manager_util.cc
@@ -88,8 +88,7 @@ void SetSbV4UrlPrefixForTesting(const ch
 }
 
 std::string GetReportUrl(const V4ProtocolConfig& config,
-                         const std::string& method,
-                         const ExtendedReportingLevel* reporting_level) {
+                         const std::string& method) {
   std::string url = base::StringPrintf(
       "%s/%s?client=%s&appver=%s&pver=4.0", kSbReportsURLPrefix, method.c_str(),
       config.client_name.c_str(), config.version.c_str());
@@ -98,8 +97,6 @@ std::string GetReportUrl(const V4Protoco
     base::StringAppendF(&url, "&key=%s",
                         net::EscapeQueryParamValue(api_key, true).c_str());
   }
-  if (reporting_level)
-    url.append(base::StringPrintf("&ext=%d", *reporting_level));
   return url;
 }
 
--- a/components/safe_browsing/db/v4_protocol_manager_util.h
+++ b/components/safe_browsing/db/v4_protocol_manager_util.h
@@ -18,9 +18,10 @@
 #include <vector>
 
 #include "base/containers/flat_set.h"
+#include "base/files/file_path.h"
 #include "base/gtest_prod_util.h"
 #include "base/strings/string_piece.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
+#include "base/time/time.h"
 #include "components/safe_browsing/db/safebrowsing.pb.h"
 #include "url/gurl.h"
 
@@ -88,8 +89,7 @@ V4ProtocolConfig GetV4ProtocolConfig(con
 // hits back to Safe Browsing service.
 std::string GetReportUrl(
     const V4ProtocolConfig& config,
-    const std::string& method,
-    const ExtendedReportingLevel* reporting_level = nullptr);
+    const std::string& method);
 
 // Different types of threats that SafeBrowsing protects against. This is the
 // type that's returned to the clients of SafeBrowsing in Chromium.
--- a/components/safe_browsing/db/v4_update_protocol_manager.cc
+++ b/components/safe_browsing/db/v4_update_protocol_manager.cc
@@ -74,19 +74,8 @@ static const int kV4TimerStartIntervalSe
 // Maximum time, in seconds, to wait for a response to an update request.
 static const int kV4TimerUpdateWaitSecMax = 15 * 60;  // 15 minutes
 
-ChromeClientInfo::SafeBrowsingReportingPopulation GetReportingLevelProtoValue(
-    ExtendedReportingLevel reporting_level) {
-  switch (reporting_level) {
-    case SBER_LEVEL_OFF:
-      return ChromeClientInfo::OPT_OUT;
-    case SBER_LEVEL_LEGACY:
-      return ChromeClientInfo::EXTENDED;
-    case SBER_LEVEL_SCOUT:
-      return ChromeClientInfo::SCOUT;
-    default:
-      NOTREACHED() << "Unexpected reporting_level!";
-      return ChromeClientInfo::UNSPECIFIED;
-  }
+ChromeClientInfo::SafeBrowsingReportingPopulation GetReportingLevelProtoValue() {
+  return ChromeClientInfo::OPT_OUT;
 }
 
 // The default V4UpdateProtocolManagerFactory.
@@ -98,12 +87,10 @@ class V4UpdateProtocolManagerFactoryImpl
   std::unique_ptr<V4UpdateProtocolManager> CreateProtocolManager(
       scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
       const V4ProtocolConfig& config,
-      V4UpdateCallback update_callback,
-      ExtendedReportingLevelCallback extended_reporting_level_callback)
+      V4UpdateCallback update_callback)
       override {
     return std::unique_ptr<V4UpdateProtocolManager>(
-        new V4UpdateProtocolManager(url_loader_factory, config, update_callback,
-                                    extended_reporting_level_callback));
+        new V4UpdateProtocolManager(url_loader_factory, config, update_callback));
   }
 
  private:
@@ -119,14 +106,12 @@ V4UpdateProtocolManagerFactory* V4Update
 std::unique_ptr<V4UpdateProtocolManager> V4UpdateProtocolManager::Create(
     scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
     const V4ProtocolConfig& config,
-    V4UpdateCallback update_callback,
-    ExtendedReportingLevelCallback extended_reporting_level_callback) {
+    V4UpdateCallback update_callback) {
   if (!factory_) {
     factory_ = new V4UpdateProtocolManagerFactoryImpl();
   }
   return factory_->CreateProtocolManager(url_loader_factory, config,
-                                         update_callback,
-                                         extended_reporting_level_callback);
+                                         update_callback);
 }
 
 void V4UpdateProtocolManager::ResetUpdateErrors() {
@@ -137,8 +122,7 @@ void V4UpdateProtocolManager::ResetUpdat
 V4UpdateProtocolManager::V4UpdateProtocolManager(
     scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
     const V4ProtocolConfig& config,
-    V4UpdateCallback update_callback,
-    ExtendedReportingLevelCallback extended_reporting_level_callback)
+    V4UpdateCallback update_callback)
     : update_error_count_(0),
       update_back_off_mult_(1),
       next_update_interval_(base::TimeDelta::FromSeconds(
@@ -146,8 +130,7 @@ V4UpdateProtocolManager::V4UpdateProtoco
                         kV4TimerStartIntervalSecMax))),
       config_(config),
       url_loader_factory_(url_loader_factory),
-      update_callback_(update_callback),
-      extended_reporting_level_callback_(extended_reporting_level_callback) {
+      update_callback_(update_callback) {
   // Do not auto-schedule updates. Let the owner (V4LocalDatabaseManager) do it
   // when it is ready to process updates.
 }
@@ -241,11 +224,6 @@ std::string V4UpdateProtocolManager::Get
         RICE);
   }
 
-  if (!extended_reporting_level_callback_.is_null()) {
-    request.mutable_chrome_client_info()->set_reporting_population(
-        GetReportingLevelProtoValue(extended_reporting_level_callback_.Run()));
-  }
-
   V4ProtocolManagerUtil::SetClientInfoFromConfig(request.mutable_client(),
                                                  config_);
 
--- a/components/safe_browsing/db/v4_update_protocol_manager.h
+++ b/components/safe_browsing/db/v4_update_protocol_manager.h
@@ -21,7 +21,6 @@
 #include "base/sequence_checker.h"
 #include "base/time/time.h"
 #include "base/timer/timer.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/db/safebrowsing.pb.h"
 #include "components/safe_browsing/db/util.h"
 #include "components/safe_browsing/db/v4_protocol_manager_util.h"
@@ -45,8 +44,6 @@ class V4UpdateProtocolManagerFactory;
 typedef base::Callback<void(std::unique_ptr<ParsedServerResponse>)>
     V4UpdateCallback;
 
-typedef base::Callback<ExtendedReportingLevel()> ExtendedReportingLevelCallback;
-
 class V4UpdateProtocolManager {
  public:
   ~V4UpdateProtocolManager();
@@ -61,8 +58,7 @@ class V4UpdateProtocolManager {
   static std::unique_ptr<V4UpdateProtocolManager> Create(
       scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
       const V4ProtocolConfig& config,
-      V4UpdateCallback update_callback,
-      ExtendedReportingLevelCallback extended_reporting_level_callback);
+      V4UpdateCallback update_callback);
 
   void OnURLLoaderComplete(std::unique_ptr<std::string> response_body);
 
@@ -80,8 +76,7 @@ class V4UpdateProtocolManager {
   V4UpdateProtocolManager(
       scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
       const V4ProtocolConfig& config,
-      V4UpdateCallback update_callback,
-      ExtendedReportingLevelCallback extended_reporting_level_callback);
+      V4UpdateCallback update_callback);
 
  private:
   FRIEND_TEST_ALL_PREFIXES(V4UpdateProtocolManagerTest,
@@ -96,8 +91,6 @@ class V4UpdateProtocolManager {
   FRIEND_TEST_ALL_PREFIXES(V4UpdateProtocolManagerTest, TestDisableAutoUpdates);
   FRIEND_TEST_ALL_PREFIXES(V4UpdateProtocolManagerTest,
                            TestGetUpdatesHasTimeout);
-  FRIEND_TEST_ALL_PREFIXES(V4UpdateProtocolManagerTest,
-                           TestExtendedReportingLevelIncluded);
   friend class V4UpdateProtocolManagerFactoryImpl;
 
   void OnURLLoaderCompleteInternal(int net_error,
@@ -195,8 +188,6 @@ class V4UpdateProtocolManager {
   // complete.
   base::OneShotTimer timeout_timer_;
 
-  ExtendedReportingLevelCallback extended_reporting_level_callback_;
-
   SEQUENCE_CHECKER(sequence_checker_);
 
   DISALLOW_COPY_AND_ASSIGN(V4UpdateProtocolManager);
@@ -210,8 +201,7 @@ class V4UpdateProtocolManagerFactory {
   virtual std::unique_ptr<V4UpdateProtocolManager> CreateProtocolManager(
       scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
       const V4ProtocolConfig& config,
-      V4UpdateCallback update_callback,
-      ExtendedReportingLevelCallback extended_reporting_level_callback) = 0;
+      V4UpdateCallback update_callback) = 0;
 
  private:
   DISALLOW_COPY_AND_ASSIGN(V4UpdateProtocolManagerFactory);
--- a/components/safe_browsing/password_protection/password_protection_service.cc
+++ b/components/safe_browsing/password_protection/password_protection_service.cc
@@ -255,11 +255,6 @@ bool PasswordProtectionService::CanSendP
       IsPingingEnabled(trigger_type, password_type, reason);
   // Pinging is enabled for password_reuse trigger level; however we need to
   // make sure *reason is set appropriately.
-  PasswordProtectionTrigger trigger_level =
-      GetPasswordProtectionWarningTriggerPref(password_type);
-  if (trigger_level == PASSWORD_REUSE) {
-    *reason = RequestOutcome::PASSWORD_ALERT_MODE;
-  }
   if (is_pinging_enabled &&
       !IsURLWhitelistedForPasswordEntry(main_frame_url, reason)) {
     return true;
@@ -449,8 +444,7 @@ PasswordProtectionService::MaybeCreateNa
 
 bool PasswordProtectionService::IsWarningEnabled(
     ReusedPasswordAccountType password_type) {
-  return GetPasswordProtectionWarningTriggerPref(password_type) ==
-         PHISHING_REUSE;
+  return false;
 }
 
 // static
--- a/components/safe_browsing/password_protection/password_protection_service.h
+++ b/components/safe_browsing/password_protection/password_protection_service.h
@@ -23,7 +23,6 @@
 #include "components/safe_browsing/browser/referrer_chain_provider.h"
 #include "components/safe_browsing/buildflags.h"
 #include "components/safe_browsing/common/safe_browsing.mojom.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/db/v4_protocol_manager_util.h"
 #include "components/safe_browsing/password_protection/metrics_util.h"
 #include "components/safe_browsing/proto/csd.pb.h"
@@ -190,10 +189,6 @@ class PasswordProtectionService : public
   // Returns if the warning UI is enabled.
   bool IsWarningEnabled(ReusedPasswordAccountType password_type);
 
-  // Returns the pref value of password protection warning trigger.
-  virtual PasswordProtectionTrigger GetPasswordProtectionWarningTriggerPref(
-      ReusedPasswordAccountType password_type) const = 0;
-
   // If |url| matches Safe Browsing whitelist domains, password protection
   // change password URL, or password protection login URLs in the enterprise
   // policy.
--- a/components/safe_browsing/ping_manager.cc
+++ b/components/safe_browsing/ping_manager.cc
@@ -140,7 +140,7 @@ GURL PingManager::SafeBrowsingHitUrl(
          hit_report.threat_type == SB_THREAT_TYPE_URL_CLIENT_SIDE_PHISHING ||
          hit_report.threat_type == SB_THREAT_TYPE_URL_CLIENT_SIDE_MALWARE);
   std::string url =
-      GetReportUrl(config_, "report", &hit_report.extended_reporting_level);
+      GetReportUrl(config_, "report");
   std::string threat_list = "none";
   switch (hit_report.threat_type) {
     case SB_THREAT_TYPE_URL_MALWARE:
--- a/components/safe_browsing/realtime/policy_engine.cc
+++ b/components/safe_browsing/realtime/policy_engine.cc
@@ -8,7 +8,6 @@
 #include "base/metrics/histogram_macros.h"
 #include "build/build_config.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/features.h"
 #include "components/unified_consent/pref_names.h"
 #include "components/user_prefs/user_prefs.h"
--- a/components/safe_browsing/triggers/suspicious_site_trigger_unittest.cc
+++ b/components/safe_browsing/triggers/suspicious_site_trigger_unittest.cc
@@ -10,7 +10,6 @@
 #include "base/test/test_simple_task_runner.h"
 #include "build/build_config.h"
 #include "components/prefs/testing_pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/triggers/mock_trigger_manager.h"
 #include "content/public/test/browser_task_environment.h"
 #include "content/public/test/navigation_simulator.h"
--- a/components/safe_browsing/triggers/trigger_manager.cc
+++ b/components/safe_browsing/triggers/trigger_manager.cc
@@ -9,7 +9,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/base_ui_manager.h"
 #include "components/safe_browsing/browser/threat_details.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/features.h"
 #include "components/security_interstitials/content/unsafe_resource.h"
 #include "content/public/browser/browser_context.h"
@@ -82,10 +81,10 @@ SBErrorOptions TriggerManager::GetSBErro
     const PrefService& pref_service,
     content::WebContents* web_contents) {
   return SBErrorOptions(/*is_main_frame_load_blocked=*/false,
-                        IsExtendedReportingOptInAllowed(pref_service),
+                        false,
                         web_contents->GetBrowserContext()->IsOffTheRecord(),
-                        IsExtendedReportingEnabled(pref_service),
-                        IsExtendedReportingPolicyManaged(pref_service),
+                        false,
+                        false,
                         /*is_proceed_anyway_disabled=*/false,
                         /*should_open_links_in_new_tab=*/false,
                         /*show_back_to_safety_button=*/true,
--- a/components/safe_browsing/triggers/trigger_throttler.cc
+++ b/components/safe_browsing/triggers/trigger_throttler.cc
@@ -11,7 +11,6 @@
 #include "base/time/default_clock.h"
 #include "base/time/time.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/features.h"
 
 namespace safe_browsing {
@@ -217,28 +216,6 @@ void TriggerThrottler::LoadTriggerEvents
   trigger_events_.clear();
   if (!local_state_prefs_)
     return;
-
-  const base::DictionaryValue* event_dict = local_state_prefs_->GetDictionary(
-      prefs::kSafeBrowsingTriggerEventTimestamps);
-  for (const auto& trigger_pair : event_dict->DictItems()) {
-    // Check that the first item in the pair is convertible to a trigger type
-    // and that the second item is a list.
-    int trigger_type_int;
-    if (!base::StringToInt(trigger_pair.first, &trigger_type_int) ||
-        trigger_type_int < static_cast<int>(TriggerType::kMinTriggerType) ||
-        trigger_type_int > static_cast<int>(TriggerType::kMaxTriggerType)) {
-      continue;
-    }
-    if (!trigger_pair.second.is_list())
-      continue;
-
-    const TriggerType trigger_type = static_cast<TriggerType>(trigger_type_int);
-    for (const auto& timestamp : trigger_pair.second.GetList()) {
-      if (timestamp.is_double())
-        trigger_events_[trigger_type].push_back(
-            base::Time::FromDoubleT(timestamp.GetDouble()));
-    }
-  }
 }
 
 void TriggerThrottler::WriteTriggerEventsToPref() {
@@ -254,9 +231,6 @@ void TriggerThrottler::WriteTriggerEvent
       pref_timestamps->Append(base::Value(timestamp.ToDoubleT()));
     }
   }
-
-  local_state_prefs_->Set(prefs::kSafeBrowsingTriggerEventTimestamps,
-                          trigger_dict);
 }
 
 size_t TriggerThrottler::GetDailyQuotaForTrigger(
--- a/components/safe_browsing/triggers/trigger_throttler_unittest.cc
+++ b/components/safe_browsing/triggers/trigger_throttler_unittest.cc
@@ -8,7 +8,6 @@
 #include "base/test/scoped_feature_list.h"
 #include "base/test/simple_test_clock.h"
 #include "components/prefs/testing_pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/features.h"
 #include "testing/gmock/include/gmock/gmock.h"
 #include "testing/gtest/include/gtest/gtest.h"
--- a/components/safe_browsing/web_ui/safe_browsing_ui.cc
+++ b/components/safe_browsing/web_ui/safe_browsing_ui.cc
@@ -29,7 +29,6 @@
 #include "components/password_manager/core/browser/hash_password_manager.h"
 #include "components/safe_browsing/browser/referrer_chain_provider.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/features.h"
 #include "components/safe_browsing/proto/csd.pb.h"
 #include "components/safe_browsing/web_ui/constants.h"
@@ -1244,9 +1243,7 @@ void SafeBrowsingUIHandler::GetPrefs(con
   AllowJavascript();
   std::string callback_id;
   args->GetString(0, &callback_id);
-  ResolveJavascriptCallback(base::Value(callback_id),
-                            safe_browsing::GetSafeBrowsingPreferencesList(
-                                user_prefs::UserPrefs::Get(browser_context_)));
+  ResolveJavascriptCallback(base::Value(callback_id), base::ListValue());
 }
 
 void SafeBrowsingUIHandler::GetCookie(const base::ListValue* args) {
--- a/components/security_interstitials/content/cert_report_helper.cc
+++ b/components/security_interstitials/content/cert_report_helper.cc
@@ -15,7 +15,6 @@
 #include "build/branding_buildflags.h"
 #include "build/build_config.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/ssl_cert_reporter.h"
 #include "components/security_interstitials/core/controller_client.h"
 #include "components/security_interstitials/core/metrics_helper.h"
@@ -83,8 +82,7 @@ void CertReportHelper::PopulateExtendedR
     return;
 
   load_time_data->SetBoolean(
-      security_interstitials::kBoxChecked,
-      safe_browsing::IsExtendedReportingEnabled(*GetPrefs(web_contents_)));
+      security_interstitials::kBoxChecked, false);
 
   const std::string privacy_link = base::StringPrintf(
       security_interstitials::kPrivacyLinkHtml,
@@ -107,14 +105,8 @@ void CertReportHelper::HandleReportingCo
     PrefService* pref_service) {
   switch (command) {
     case security_interstitials::CMD_DO_REPORT:
-      safe_browsing::SetExtendedReportingPrefAndMetric(
-          pref_service, true, /* value */
-          safe_browsing::SBER_OPTIN_SITE_SECURITY_INTERSTITIAL);
       break;
     case security_interstitials::CMD_DONT_REPORT:
-      safe_browsing::SetExtendedReportingPrefAndMetric(
-          pref_service, false, /* value */
-          safe_browsing::SBER_OPTIN_SITE_SECURITY_INTERSTITIAL);
       break;
     case security_interstitials::CMD_PROCEED:
       user_action_ = CertificateErrorReport::USER_PROCEEDED;
@@ -132,7 +124,7 @@ void CertReportHelper::FinishCertCollect
   if (!ShouldShowCertificateReporterCheckbox())
     return;
 
-  if (!safe_browsing::IsExtendedReportingEnabled(*GetPrefs(web_contents_)))
+  if (true)
     return;
 
   if (metrics_helper_) {
@@ -168,9 +160,7 @@ bool CertReportHelper::ShouldShowCertifi
   const bool in_incognito =
       web_contents_->GetBrowserContext()->IsOffTheRecord();
   const PrefService* pref_service = GetPrefs(web_contents_);
-  bool can_show_checkbox =
-      safe_browsing::IsExtendedReportingOptInAllowed(*pref_service) &&
-      !safe_browsing::IsExtendedReportingPolicyManaged(*pref_service);
+  bool can_show_checkbox = false;
 
   return base::FieldTrialList::FindFullName(kFinchExperimentName) ==
              kFinchGroupShowPossiblySend &&
--- a/components/security_interstitials/content/security_interstitial_controller_client.cc
+++ b/components/security_interstitials/content/security_interstitial_controller_client.cc
@@ -7,7 +7,6 @@
 #include <utility>
 
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/core/metrics_helper.h"
 #include "content/public/browser/interstitial_page.h"
 #include "content/public/browser/web_contents.h"
@@ -97,11 +96,6 @@ SecurityInterstitialControllerClient::Ge
   return prefs_;
 }
 
-const std::string
-SecurityInterstitialControllerClient::GetExtendedReportingPrefName() const {
-  return prefs::kSafeBrowsingScoutReportingEnabled;
-}
-
 bool SecurityInterstitialControllerClient::CanLaunchDateAndTimeSettings() {
   NOTREACHED();
   return false;
--- a/components/security_interstitials/content/security_interstitial_controller_client.h
+++ b/components/security_interstitials/content/security_interstitial_controller_client.h
@@ -49,8 +49,6 @@ class SecurityInterstitialControllerClie
   void LaunchDateAndTimeSettings() override;
 
  protected:
-  // security_interstitials::ControllerClient overrides.
-  const std::string GetExtendedReportingPrefName() const override;
   content::WebContents* web_contents_;
 
  private:
--- a/components/security_interstitials/content/security_interstitial_page.cc
+++ b/components/security_interstitials/content/security_interstitial_page.cc
@@ -11,7 +11,6 @@
 #include "base/values.h"
 #include "components/grit/components_resources.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/security_interstitial_controller_client.h"
 #include "components/security_interstitials/core/common_string_util.h"
 #include "content/public/browser/interstitial_page.h"
@@ -34,13 +33,6 @@ SecurityInterstitialPage::SecurityInters
       on_show_extended_reporting_pref_exists_(false),
       on_show_extended_reporting_pref_value_(false),
       controller_(std::move(controller)) {
-  // Determine if any prefs need to be updated prior to showing the security
-  // interstitial. Note that some content embedders (such as Android WebView)
-  // uses security interstitials without a prefservice.
-  if (controller_->GetPrefService()) {
-    safe_browsing::UpdatePrefsBeforeSecurityInterstitial(
-        controller_->GetPrefService());
-  }
   SetUpMetrics();
 
   // Creating interstitial_page_ without showing it leaks memory, so don't
@@ -101,23 +93,11 @@ SecurityInterstitialControllerClient* Se
 }
 
 void SecurityInterstitialPage::UpdateMetricsAfterSecurityInterstitial() {
-  if (controller_->GetPrefService()) {
-    safe_browsing::UpdateMetricsAfterSecurityInterstitial(
-        *controller_->GetPrefService(), on_show_extended_reporting_pref_exists_,
-        on_show_extended_reporting_pref_value_);
-  }
 }
 
 void SecurityInterstitialPage::SetUpMetrics() {
-  // Remember the initial state of the extended reporting pref, to be compared
-  // to the same data when the interstitial is closed.
-  PrefService* prefs = controller_->GetPrefService();
-  if (prefs) {
-    on_show_extended_reporting_pref_exists_ =
-        safe_browsing::ExtendedReportingPrefExists(*prefs);
-    on_show_extended_reporting_pref_value_ =
-        safe_browsing::IsExtendedReportingEnabled(*prefs);
-  }
+  on_show_extended_reporting_pref_exists_ = false;
+  on_show_extended_reporting_pref_value_ = false;
 }
 
 base::string16 SecurityInterstitialPage::GetFormattedHostName() const {
--- a/components/security_interstitials/content/ssl_blocking_page.cc
+++ b/components/security_interstitials/content/ssl_blocking_page.cc
@@ -12,7 +12,6 @@
 #include "base/metrics/histogram_macros.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/time/time.h"
-#include "components/safe_browsing/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/cert_report_helper.h"
 #include "components/security_interstitials/content/security_interstitial_controller_client.h"
 #include "components/security_interstitials/content/ssl_cert_reporter.h"
--- a/components/security_interstitials/core/controller_client.cc
+++ b/components/security_interstitials/core/controller_client.cc
@@ -36,7 +36,6 @@ MetricsHelper* ControllerClient::metrics
 
 void ControllerClient::SetReportingPreference(bool report) {
   DCHECK(GetPrefService());
-  GetPrefService()->SetBoolean(GetExtendedReportingPrefName(), report);
   metrics_helper_->RecordUserInteraction(
       report ? MetricsHelper::SET_EXTENDED_REPORTING_ENABLED
              : MetricsHelper::SET_EXTENDED_REPORTING_DISABLED);
--- a/components/security_interstitials/core/controller_client.h
+++ b/components/security_interstitials/core/controller_client.h
@@ -109,9 +109,6 @@ class ControllerClient {
 
   void SetBaseHelpCenterUrlForTesting(const GURL& test_url);
 
- protected:
-  virtual const std::string GetExtendedReportingPrefName() const = 0;
-
  private:
   std::unique_ptr<MetricsHelper> metrics_helper_;
   // Link to the help center.
--- a/components/signin/core/browser/account_investigator.cc
+++ b/components/signin/core/browser/account_investigator.cc
@@ -14,7 +14,6 @@
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/pref_service.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/accounts_in_cookie_jar_info.h"
 #include "google_apis/gaia/gaia_auth_util.h"
 #include "google_apis/gaia/google_service_auth_error.h"
@@ -50,22 +49,11 @@ AccountInvestigator::~AccountInvestigato
 
 // static
 void AccountInvestigator::RegisterPrefs(PrefRegistrySimple* registry) {
-  registry->RegisterStringPref(prefs::kGaiaCookieHash, std::string());
-  registry->RegisterDoublePref(prefs::kGaiaCookieChangedTime, 0);
-  registry->RegisterDoublePref(prefs::kGaiaCookiePeriodicReportTime, 0);
 }
 
 void AccountInvestigator::Initialize() {
   identity_manager_->AddObserver(this);
   previously_authenticated_ = identity_manager_->HasPrimaryAccount();
-
-  Time previous = Time::FromDoubleT(
-      pref_service_->GetDouble(prefs::kGaiaCookiePeriodicReportTime));
-  if (previous.is_null())
-    previous = Time::Now();
-  const TimeDelta delay =
-      CalculatePeriodicDelay(previous, Time::Now(), kPeriodicReportingInterval);
-  timer_.Start(FROM_HERE, delay, this, &AccountInvestigator::TryPeriodicReport);
 }
 
 void AccountInvestigator::Shutdown() {
@@ -92,16 +80,13 @@ void AccountInvestigator::OnAccountsInCo
   // a valid cached ListAccounts response ready for us. Or even both of these
   // could be simultaneously happening, although this should be extremely
   // infrequent.
-  const std::string old_hash(pref_service_->GetString(prefs::kGaiaCookieHash));
+  const std::string old_hash;
   const std::string new_hash(
       HashAccounts(signed_in_accounts, signed_out_accounts));
   const bool currently_authenticated = identity_manager_->HasPrimaryAccount();
   if (old_hash != new_hash) {
     SharedCookieJarReport(signed_in_accounts, signed_out_accounts, Time::Now(),
                           ReportingType::ON_CHANGE);
-    pref_service_->SetString(prefs::kGaiaCookieHash, new_hash);
-    pref_service_->SetDouble(prefs::kGaiaCookieChangedTime,
-                             Time::Now().ToDoubleT());
   } else if (currently_authenticated && !previously_authenticated_) {
     SignedInAccountRelationReport(signed_in_accounts, signed_out_accounts,
                                   ReportingType::ON_CHANGE);
@@ -209,10 +194,6 @@ void AccountInvestigator::DoPeriodicRepo
                         ReportingType::PERIODIC);
 
   periodic_pending_ = false;
-  pref_service_->SetDouble(prefs::kGaiaCookiePeriodicReportTime,
-                           Time::Now().ToDoubleT());
-  timer_.Start(FROM_HERE, kPeriodicReportingInterval, this,
-               &AccountInvestigator::TryPeriodicReport);
 }
 
 void AccountInvestigator::SharedCookieJarReport(
@@ -220,8 +201,7 @@ void AccountInvestigator::SharedCookieJa
     const std::vector<ListedAccount>& signed_out_accounts,
     const Time now,
     const ReportingType type) {
-  const Time last_changed = Time::FromDoubleT(
-      pref_service_->GetDouble(prefs::kGaiaCookieChangedTime));
+  const Time last_changed = Time::Now();
   TimeDelta stable_age;
   if (!last_changed.is_null())
     stable_age = std::max(now - last_changed, TimeDelta());
--- a/components/signin/core/browser/account_investigator_unittest.cc
+++ b/components/signin/core/browser/account_investigator_unittest.cc
@@ -11,7 +11,6 @@
 #include "base/test/task_environment.h"
 #include "components/prefs/pref_registry_simple.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/accounts_in_cookie_jar_info.h"
 #include "components/signin/public/identity_manager/identity_test_environment.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
--- a/components/signin/core/browser/account_reconcilor_unittest.cc
+++ b/components/signin/core/browser/account_reconcilor_unittest.cc
@@ -27,7 +27,6 @@
 #include "components/signin/public/base/list_accounts_test_utils.h"
 #include "components/signin/public/base/signin_buildflags.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/test_signin_client.h"
 #include "components/signin/public/identity_manager/accounts_in_cookie_jar_info.h"
 #include "components/signin/public/identity_manager/identity_test_environment.h"
--- a/components/signin/core/browser/dice_account_reconcilor_delegate.cc
+++ b/components/signin/core/browser/dice_account_reconcilor_delegate.cc
@@ -11,7 +11,6 @@
 #include "base/stl_util.h"
 #include "components/prefs/pref_service.h"
 #include "components/signin/public/base/signin_client.h"
-#include "components/signin/public/base/signin_pref_names.h"
 
 const base::Feature kUseMultiloginEndpoint{"UseMultiloginEndpoint",
                                            base::FEATURE_DISABLED_BY_DEFAULT};
--- a/components/signin/core/browser/dice_account_reconcilor_delegate_unittest.cc
+++ b/components/signin/core/browser/dice_account_reconcilor_delegate_unittest.cc
@@ -8,7 +8,6 @@
 
 #include "components/prefs/pref_registry_simple.h"
 #include "components/signin/public/base/account_consistency_method.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/test_signin_client.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
 #include "google_apis/gaia/gaia_auth_util.h"
--- a/components/signin/core/browser/signin_investigator.cc
+++ b/components/signin/core/browser/signin_investigator.cc
@@ -7,7 +7,6 @@
 #include "base/logging.h"
 #include "base/metrics/histogram_macros.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "google_apis/gaia/gaia_auth_util.h"
 
 using signin_metrics::AccountEquality;
@@ -26,13 +25,9 @@ SigninInvestigator::SigninInvestigator(c
 SigninInvestigator::~SigninInvestigator() {}
 
 bool SigninInvestigator::AreAccountsEqualWithFallback() {
-  const std::string last_id =
-      provider_->GetPrefs()->GetString(prefs::kGoogleServicesLastAccountId);
-  bool same_email = gaia::AreEmailsSame(
-      current_email_,
-      provider_->GetPrefs()->GetString(prefs::kGoogleServicesLastUsername));
-  if (!current_id_.empty() && !last_id.empty()) {
-    bool same_id = current_id_ == last_id;
+  bool same_email = false;
+  if (false) {
+    bool same_id = false;
     if (same_email && same_id) {
       LogAccountEquality(AccountEquality::BOTH_EQUAL);
     } else if (same_email) {
@@ -51,9 +46,7 @@ bool SigninInvestigator::AreAccountsEqua
 
 InvestigatedScenario SigninInvestigator::Investigate() {
   InvestigatedScenario scenario;
-  if (provider_->GetPrefs()
-          ->GetString(prefs::kGoogleServicesLastUsername)
-          .empty()) {
+  if (true) {
     scenario = InvestigatedScenario::kFirstSignIn;
   } else if (AreAccountsEqualWithFallback()) {
     scenario = InvestigatedScenario::kSameAccount;
--- a/components/signin/core/browser/signin_investigator_unittest.cc
+++ b/components/signin/core/browser/signin_investigator_unittest.cc
@@ -9,7 +9,6 @@
 #include "components/prefs/pref_registry_simple.h"
 #include "components/signin/core/browser/signin_investigator.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_test_environment.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
 #include "testing/gtest/include/gtest/gtest.h"
--- a/components/signin/internal/identity_manager/account_tracker_service.cc
+++ b/components/signin/internal/identity_manager/account_tracker_service.cc
@@ -24,7 +24,6 @@
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/scoped_user_pref_update.h"
 #include "components/signin/internal/identity_manager/account_info_util.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "ui/gfx/image/image.h"
 
 #if defined(OS_ANDROID)
@@ -109,9 +108,6 @@ AccountTrackerService::~AccountTrackerSe
 
 // static
 void AccountTrackerService::RegisterPrefs(PrefRegistrySimple* registry) {
-  registry->RegisterListPref(prefs::kAccountInfo);
-  registry->RegisterIntegerPref(prefs::kAccountIdMigrationState,
-                                AccountTrackerService::MIGRATION_NOT_STARTED);
 }
 
 void AccountTrackerService::Initialize(PrefService* pref_service,
@@ -182,11 +178,7 @@ AccountInfo AccountTrackerService::FindA
 
 // static
 bool AccountTrackerService::IsMigrationSupported() {
-#if defined(OS_CHROMEOS)
   return false;
-#else
-  return true;
-#endif
 }
 
 AccountTrackerService::AccountIdMigrationState
@@ -387,14 +379,12 @@ AccountTrackerService::ComputeNewMigrati
 
 void AccountTrackerService::SetMigrationState(AccountIdMigrationState state) {
   DCHECK(state != MIGRATION_DONE || IsMigrationDone());
-  pref_service_->SetInteger(prefs::kAccountIdMigrationState, state);
 }
 
 // static
 AccountTrackerService::AccountIdMigrationState
 AccountTrackerService::GetMigrationState(const PrefService* pref_service) {
-  return static_cast<AccountTrackerService::AccountIdMigrationState>(
-      pref_service->GetInteger(prefs::kAccountIdMigrationState));
+  return MIGRATION_NOT_STARTED;
 }
 
 base::FilePath AccountTrackerService::GetImagePathFor(
@@ -447,11 +437,10 @@ void AccountTrackerService::RemoveAccoun
 }
 
 void AccountTrackerService::LoadFromPrefs() {
-  const base::ListValue* list = pref_service_->GetList(prefs::kAccountInfo);
   std::set<CoreAccountId> to_remove;
-  for (size_t i = 0; i < list->GetSize(); ++i) {
+  if (false) {
     const base::DictionaryValue* dict;
-    if (list->GetDictionary(i, &dict)) {
+    while (false) {
       std::string value;
       if (dict->GetString(kAccountKeyPath, &value)) {
         // Ignore incorrectly persisted non-canonical account ids.
@@ -531,13 +520,11 @@ void AccountTrackerService::LoadFromPref
 }
 
 void AccountTrackerService::SaveToPrefs(const AccountInfo& account_info) {
-  if (!pref_service_)
-    return;
+  return;
 
   base::DictionaryValue* dict = nullptr;
-  ListPrefUpdate update(pref_service_, prefs::kAccountInfo);
-  for (size_t i = 0; i < update->GetSize(); ++i, dict = nullptr) {
-    if (update->GetDictionary(i, &dict)) {
+  if (false) {
+    while (false) {
       std::string value;
       if (dict->GetString(kAccountKeyPath, &value) &&
           value == account_info.account_id.ToString())
@@ -547,9 +534,6 @@ void AccountTrackerService::SaveToPrefs(
 
   if (!dict) {
     dict = new base::DictionaryValue();
-    update->Append(base::WrapUnique(dict));
-    // |dict| is invalidated at this point, so it needs to be reset.
-    update->GetDictionary(update->GetSize() - 1, &dict);
     dict->SetString(kAccountKeyPath, account_info.account_id.ToString());
   }
 
@@ -570,14 +554,12 @@ void AccountTrackerService::RemoveFromPr
   if (!pref_service_)
     return;
 
-  ListPrefUpdate update(pref_service_, prefs::kAccountInfo);
-  for (size_t i = 0; i < update->GetSize(); ++i) {
+  if (false) {
     base::DictionaryValue* dict = nullptr;
-    if (update->GetDictionary(i, &dict)) {
+    while (false) {
       std::string value;
       if (dict->GetString(kAccountKeyPath, &value) &&
           value == account_info.account_id.ToString()) {
-        update->Remove(i, nullptr);
         break;
       }
     }
--- a/components/signin/internal/identity_manager/account_tracker_service.h
+++ b/components/signin/internal/identity_manager/account_tracker_service.h
@@ -222,6 +222,8 @@ class AccountTrackerService {
   AccountInfoCallback on_account_updated_callback_;
   AccountInfoCallback on_account_removed_callback_;
 
+  AccountIdMigrationState migration_state_;
+
   // Task runner used for file operations on avatar images.
   scoped_refptr<base::SequencedTaskRunner> image_storage_task_runner_;
 
--- a/components/signin/internal/identity_manager/account_tracker_service_unittest.cc
+++ b/components/signin/internal/identity_manager/account_tracker_service_unittest.cc
@@ -22,7 +22,6 @@
 #include "components/signin/internal/identity_manager/account_tracker_service.h"
 #include "components/signin/internal/identity_manager/fake_profile_oauth2_token_service.h"
 #include "components/signin/public/base/avatar_icon_util.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/test_signin_client.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "google_apis/gaia/gaia_oauth_client.h"
--- a/components/signin/internal/identity_manager/gaia_cookie_manager_service.cc
+++ b/components/signin/internal/identity_manager/gaia_cookie_manager_service.cc
@@ -28,7 +28,6 @@
 #include "components/signin/internal/identity_manager/ubertoken_fetcher_impl.h"
 #include "components/signin/public/base/signin_buildflags.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/set_accounts_in_cookie_result.h"
 #include "google_apis/gaia/gaia_constants.h"
 #include "google_apis/gaia/gaia_urls.h"
@@ -431,9 +430,7 @@ GaiaCookieManagerService::GaiaCookieMana
       listAccountsUnexpectedServerResponseRetried_(false),
       external_cc_result_fetched_(false),
       list_accounts_stale_(true) {
-  std::string gaia_cookie_last_list_accounts_data =
-      signin_client_->GetPrefs()->GetString(
-          prefs::kGaiaCookieLastListAccountsData);
+  std::string gaia_cookie_last_list_accounts_data;
 
   if (!gaia_cookie_last_list_accounts_data.empty()) {
     if (!gaia::ParseListAccountsData(gaia_cookie_last_list_accounts_data,
@@ -456,8 +453,6 @@ GaiaCookieManagerService::~GaiaCookieMan
 
 // static
 void GaiaCookieManagerService::RegisterPrefs(PrefRegistrySimple* registry) {
-  registry->RegisterStringPref(prefs::kGaiaCookieLastListAccountsData,
-                               std::string());
 }
 
 void GaiaCookieManagerService::InitCookieListener() {
@@ -839,16 +834,12 @@ void GaiaCookieManagerService::OnListAcc
                                    &signed_out_accounts_)) {
     listed_accounts_.clear();
     signed_out_accounts_.clear();
-    signin_client_->GetPrefs()->ClearPref(
-        prefs::kGaiaCookieLastListAccountsData);
     GoogleServiceAuthError error(
         GoogleServiceAuthError::UNEXPECTED_SERVICE_RESPONSE);
     OnListAccountsFailure(error);
     return;
   }
 
-  signin_client_->GetPrefs()->SetString(prefs::kGaiaCookieLastListAccountsData,
-                                        data);
   RecordListAccountsFailure(GoogleServiceAuthError::NONE);
 
   InitializeListedAccountsIds();
--- a/components/signin/internal/identity_manager/gaia_cookie_manager_service_unittest.cc
+++ b/components/signin/internal/identity_manager/gaia_cookie_manager_service_unittest.cc
@@ -24,7 +24,6 @@
 #include "components/prefs/testing_pref_service.h"
 #include "components/signin/internal/identity_manager/account_tracker_service.h"
 #include "components/signin/internal/identity_manager/fake_profile_oauth2_token_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/test_signin_client.h"
 #include "google_apis/gaia/gaia_constants.h"
 #include "google_apis/gaia/gaia_urls.h"
--- a/components/signin/internal/identity_manager/mutable_profile_oauth2_token_service_delegate.cc
+++ b/components/signin/internal/identity_manager/mutable_profile_oauth2_token_service_delegate.cc
@@ -17,7 +17,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/signin/public/base/signin_client.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/signin/public/webdata/token_web_data.h"
 #include "components/webdata/common/web_data_service_base.h"
@@ -118,7 +117,7 @@ signin::LoadCredentialsState LoadCredent
 bool ShouldMigrateToDice(signin::AccountConsistencyMethod account_consistency,
                          PrefService* prefs) {
   return account_consistency == signin::AccountConsistencyMethod::kDice &&
-         !prefs->GetBoolean(prefs::kTokenServiceDiceCompatible);
+         true;
 }
 
 }  // namespace
@@ -276,7 +275,6 @@ MutableProfileOAuth2TokenServiceDelegate
 // static
 void MutableProfileOAuth2TokenServiceDelegate::RegisterProfilePrefs(
     PrefRegistrySimple* registry) {
-  registry->RegisterBooleanPref(prefs::kTokenServiceDiceCompatible, false);
 }
 
 std::unique_ptr<OAuth2AccessTokenFetcher>
@@ -634,9 +632,6 @@ void MutableProfileOAuth2TokenServiceDel
         UpdateCredentials(loading_primary_account_id_, old_login_token);
     }
   }
-
-  if (migrate_to_dice)
-    client_->GetPrefs()->SetBoolean(prefs::kTokenServiceDiceCompatible, true);
 }
 
 void MutableProfileOAuth2TokenServiceDelegate::UpdateCredentials(
@@ -830,8 +825,6 @@ void MutableProfileOAuth2TokenServiceDel
 }
 
 void MutableProfileOAuth2TokenServiceDelegate::FinishLoadingCredentials() {
-  if (account_consistency_ == signin::AccountConsistencyMethod::kDice)
-    DCHECK(client_->GetPrefs()->GetBoolean(prefs::kTokenServiceDiceCompatible));
   FireRefreshTokensLoaded();
 }
 
@@ -862,8 +855,7 @@ void MutableProfileOAuth2TokenServiceDel
                  LOAD_CREDENTIALS_FINISHED_WITH_DB_CANNOT_BE_OPENED);
 
   if (account_consistency_ == signin::AccountConsistencyMethod::kDice &&
-      !client_->GetPrefs()->GetBoolean(prefs::kTokenServiceDiceCompatible)) {
+      true) {
     RevokeAllCredentials();
-    client_->GetPrefs()->SetBoolean(prefs::kTokenServiceDiceCompatible, true);
   }
 }
--- a/components/signin/internal/identity_manager/mutable_profile_oauth2_token_service_delegate_unittest.cc
+++ b/components/signin/internal/identity_manager/mutable_profile_oauth2_token_service_delegate_unittest.cc
@@ -23,7 +23,6 @@
 #include "components/signin/internal/identity_manager/profile_oauth2_token_service.h"
 #include "components/signin/public/base/account_consistency_method.h"
 #include "components/signin/public/base/device_id_helper.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/test_signin_client.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/signin/public/webdata/token_web_data.h"
--- a/components/signin/internal/identity_manager/primary_account_manager.cc
+++ b/components/signin/internal/identity_manager/primary_account_manager.cc
@@ -19,7 +19,6 @@
 #include "components/signin/internal/identity_manager/profile_oauth2_token_service.h"
 #include "components/signin/public/base/signin_client.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/signin_switches.h"
 
 PrimaryAccountManager::PrimaryAccountManager(
@@ -46,24 +45,10 @@ PrimaryAccountManager::~PrimaryAccountMa
 
 // static
 void PrimaryAccountManager::RegisterProfilePrefs(PrefRegistrySimple* registry) {
-  registry->RegisterStringPref(prefs::kGoogleServicesHostedDomain,
-                               std::string());
-  registry->RegisterStringPref(prefs::kGoogleServicesLastAccountId,
-                               std::string());
-  registry->RegisterStringPref(prefs::kGoogleServicesLastUsername,
-                               std::string());
-  registry->RegisterStringPref(prefs::kGoogleServicesAccountId, std::string());
-  registry->RegisterBooleanPref(prefs::kGoogleServicesConsentedToSync, false);
-  registry->RegisterBooleanPref(prefs::kAutologinEnabled, true);
-  registry->RegisterListPref(prefs::kReverseAutologinRejectedEmailList);
-  registry->RegisterBooleanPref(prefs::kSigninAllowed, true);
-  registry->RegisterBooleanPref(prefs::kSignedInWithCredentialProvider, false);
 }
 
 // static
 void PrimaryAccountManager::RegisterPrefs(PrefRegistrySimple* registry) {
-  registry->RegisterStringPref(prefs::kGoogleServicesUsernamePattern,
-                               std::string());
 }
 
 void PrimaryAccountManager::Initialize(PrefService* local_state) {
@@ -71,25 +56,7 @@ void PrimaryAccountManager::Initialize(P
   DCHECK(!IsInitialized());
   initialized_ = true;
 
-  // If the user is clearing the token service from the command line, then
-  // clear their login info also (not valid to be logged in without any
-  // tokens).
-  base::CommandLine* cmd_line = base::CommandLine::ForCurrentProcess();
-  if (cmd_line->HasSwitch(switches::kClearTokenService))
-    SetPrimaryAccountInternal(CoreAccountInfo(), false);
-
-  std::string pref_account_id =
-      client_->GetPrefs()->GetString(prefs::kGoogleServicesAccountId);
-
-  // Initial value for the kGoogleServicesConsentedToSync preference if it is
-  // missing.
-  const PrefService::Preference* consented_pref =
-      client_->GetPrefs()->FindPreference(
-          prefs::kGoogleServicesConsentedToSync);
-  if (consented_pref->IsDefaultValue()) {
-    client_->GetPrefs()->SetBoolean(prefs::kGoogleServicesConsentedToSync,
-                                    !pref_account_id.empty());
-  }
+  std::string pref_account_id;
 
   if (!pref_account_id.empty()) {
     if (account_tracker_service_->GetMigrationState() ==
@@ -99,14 +66,11 @@ void PrimaryAccountManager::Initialize(P
       // |account_info.gaia| could be empty if |account_id| is already gaia id.
       if (!account_info.gaia.empty()) {
         pref_account_id = account_info.gaia;
-        client_->GetPrefs()->SetString(prefs::kGoogleServicesAccountId,
-                                       account_info.gaia);
       }
     }
   }
 
-  bool consented =
-      client_->GetPrefs()->GetBoolean(prefs::kGoogleServicesConsentedToSync);
+  bool consented = false;
   CoreAccountId account_id = CoreAccountId::FromString(pref_account_id);
   CoreAccountInfo account_info =
       account_tracker_service_->GetAccountInfo(account_id);
@@ -175,8 +139,7 @@ void PrimaryAccountManager::SetAuthentic
 
 #if DCHECK_IS_ON()
   {
-    std::string pref_account_id =
-        client_->GetPrefs()->GetString(prefs::kGoogleServicesAccountId);
+    std::string pref_account_id;
     bool consented_to_sync =
         client_->GetPrefs()->GetBoolean(prefs::kGoogleServicesConsentedToSync);
 
@@ -192,10 +155,6 @@ void PrimaryAccountManager::SetAuthentic
   // Go ahead and update the last signed in account info here as well. Once a
   // user is signed in the corresponding preferences should match. Doing it here
   // as opposed to on signin allows us to catch the upgrade scenario.
-  client_->GetPrefs()->SetString(prefs::kGoogleServicesLastAccountId,
-                                 account_info.account_id.ToString());
-  client_->GetPrefs()->SetString(prefs::kGoogleServicesLastUsername,
-                                 account_info.email);
 
   // Commit authenticated account info immediately so that it does not get lost
   // if Chrome crashes before the next commit interval.
@@ -209,19 +168,10 @@ void PrimaryAccountManager::SetPrimaryAc
 
   PrefService* prefs = client_->GetPrefs();
   const std::string& account_id = primary_account_info_.account_id.ToString();
-  if (account_id.empty()) {
-    DCHECK(!consented_to_sync);
-    prefs->ClearPref(prefs::kGoogleServicesAccountId);
-    prefs->ClearPref(prefs::kGoogleServicesConsentedToSync);
-  } else {
-    prefs->SetString(prefs::kGoogleServicesAccountId, account_id);
-    prefs->SetBoolean(prefs::kGoogleServicesConsentedToSync, consented_to_sync);
-  }
 }
 
 bool PrimaryAccountManager::IsAuthenticated() const {
-  bool consented_pref =
-      client_->GetPrefs()->GetBoolean(prefs::kGoogleServicesConsentedToSync);
+  bool consented_pref = false;
   DCHECK(!consented_pref || !primary_account_info().account_id.empty());
   return consented_pref;
 }
@@ -326,7 +276,6 @@ void PrimaryAccountManager::OnSignoutDec
   }
 
   const CoreAccountInfo account_info = GetAuthenticatedAccountInfo();
-  client_->GetPrefs()->ClearPref(prefs::kGoogleServicesHostedDomain);
   SetPrimaryAccountInternal(account_info, /*consented_to_sync=*/false);
 
   // Revoke all tokens before sending signed_out notification, because there
--- a/components/signin/internal/identity_manager/primary_account_manager_unittest.cc
+++ b/components/signin/internal/identity_manager/primary_account_manager_unittest.cc
@@ -22,7 +22,6 @@
 #include "components/signin/internal/identity_manager/primary_account_policy_manager.h"
 #include "components/signin/internal/identity_manager/profile_oauth2_token_service.h"
 #include "components/signin/public/base/account_consistency_method.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/test_signin_client.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
 #include "testing/gtest/include/gtest/gtest.h"
--- a/components/signin/internal/identity_manager/primary_account_mutator_impl.cc
+++ b/components/signin/internal/identity_manager/primary_account_mutator_impl.cc
@@ -11,7 +11,6 @@
 #include "components/signin/internal/identity_manager/account_tracker_service.h"
 #include "components/signin/internal/identity_manager/primary_account_manager.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "google_apis/gaia/core_account_id.h"
 
 namespace signin {
@@ -35,7 +34,7 @@ bool PrimaryAccountMutatorImpl::SetPrima
   AccountInfo account_info = account_tracker_->GetAccountInfo(account_id);
 
 #if !defined(OS_CHROMEOS)
-  if (!pref_service_->GetBoolean(prefs::kSigninAllowed))
+  if (true)
     return false;
 
   if (primary_account_manager_->IsAuthenticated())
--- a/components/signin/internal/identity_manager/primary_account_policy_manager_impl.cc
+++ b/components/signin/internal/identity_manager/primary_account_policy_manager_impl.cc
@@ -9,7 +9,6 @@
 #include "components/signin/internal/identity_manager/primary_account_manager.h"
 #include "components/signin/public/base/signin_client.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/signin/public/identity_manager/identity_utils.h"
 
@@ -27,17 +26,7 @@ void PrimaryAccountPolicyManagerImpl::In
   // local_state can be null during unit tests.
   if (local_state) {
     local_state_pref_registrar_.Init(local_state);
-    local_state_pref_registrar_.Add(
-        prefs::kGoogleServicesUsernamePattern,
-        base::Bind(&PrimaryAccountPolicyManagerImpl::
-                       OnGoogleServicesUsernamePatternChanged,
-                   weak_pointer_factory_.GetWeakPtr(),
-                   primary_account_manager));
   }
-  signin_allowed_.Init(
-      prefs::kSigninAllowed, client_->GetPrefs(),
-      base::Bind(&PrimaryAccountPolicyManagerImpl::OnSigninAllowedPrefChanged,
-                 base::Unretained(this), primary_account_manager));
 
   CoreAccountInfo account_info =
       primary_account_manager->GetAuthenticatedAccountInfo();
--- a/components/signin/internal/identity_manager/primary_account_policy_manager_impl.h
+++ b/components/signin/internal/identity_manager/primary_account_policy_manager_impl.h
@@ -50,9 +50,6 @@ class PrimaryAccountPolicyManagerImpl : 
   // profile-specific local prefs (like kGoogleServicesUsernamePattern).
   PrefChangeRegistrar local_state_pref_registrar_;
 
-  // Helper object to listen for changes to the signin allowed preference.
-  BooleanPrefMember signin_allowed_;
-
   base::WeakPtrFactory<PrimaryAccountPolicyManagerImpl> weak_pointer_factory_{
       this};
 
--- a/components/signin/internal/identity_manager/primary_account_policy_manager_impl_unittest.cc
+++ b/components/signin/internal/identity_manager/primary_account_policy_manager_impl_unittest.cc
@@ -15,7 +15,6 @@
 #include "components/signin/internal/identity_manager/primary_account_policy_manager_impl.h"
 #include "components/signin/internal/identity_manager/profile_oauth2_token_service.h"
 #include "components/signin/public/base/account_consistency_method.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/test_signin_client.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
 #include "testing/gtest/include/gtest/gtest.h"
--- a/components/signin/internal/identity_manager/profile_oauth2_token_service.cc
+++ b/components/signin/internal/identity_manager/profile_oauth2_token_service.cc
@@ -11,7 +11,6 @@
 #include "components/prefs/pref_registry_simple.h"
 #include "components/signin/internal/identity_manager/profile_oauth2_token_service_delegate.h"
 #include "components/signin/public/base/device_id_helper.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "google_apis/gaia/gaia_constants.h"
 #include "google_apis/gaia/google_service_auth_error.h"
 #include "google_apis/gaia/oauth2_access_token_consumer.h"
@@ -129,13 +128,6 @@ bool ProfileOAuth2TokenService::HasRefre
 // static
 void ProfileOAuth2TokenService::RegisterProfilePrefs(
     PrefRegistrySimple* registry) {
-#if defined(OS_IOS)
-  registry->RegisterBooleanPref(prefs::kTokenServiceExcludeAllSecondaryAccounts,
-                                false);
-  registry->RegisterListPref(prefs::kTokenServiceExcludedSecondaryAccounts);
-#endif
-  registry->RegisterStringPref(prefs::kGoogleServicesSigninScopedDeviceId,
-                               std::string());
 }
 
 ProfileOAuth2TokenServiceDelegate* ProfileOAuth2TokenService::GetDelegate() {
--- a/components/signin/internal/identity_manager/profile_oauth2_token_service_delegate_chromeos_unittest.cc
+++ b/components/signin/internal/identity_manager/profile_oauth2_token_service_delegate_chromeos_unittest.cc
@@ -18,7 +18,6 @@
 #include "chromeos/components/account_manager/account_manager.h"
 #include "components/signin/internal/identity_manager/account_tracker_service.h"
 #include "components/signin/internal/identity_manager/profile_oauth2_token_service_observer.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/test_signin_client.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
--- a/components/signin/internal/identity_manager/profile_oauth2_token_service_delegate_ios.mm
+++ b/components/signin/internal/identity_manager/profile_oauth2_token_service_delegate_ios.mm
@@ -18,7 +18,6 @@
 #include "components/prefs/scoped_user_pref_update.h"
 #include "components/signin/internal/identity_manager/account_tracker_service.h"
 #include "components/signin/public/base/signin_client.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/signin/public/identity_manager/ios/device_accounts_provider.h"
 #include "google_apis/gaia/oauth2_access_token_fetcher.h"
@@ -369,7 +368,4 @@ void ProfileOAuth2TokenServiceIOSDelegat
 }
 
 void ProfileOAuth2TokenServiceIOSDelegate::ClearExcludedSecondaryAccounts() {
-  client_->GetPrefs()->ClearPref(
-      prefs::kTokenServiceExcludeAllSecondaryAccounts);
-  client_->GetPrefs()->ClearPref(prefs::kTokenServiceExcludedSecondaryAccounts);
 }
--- a/components/signin/internal/identity_manager/profile_oauth2_token_service_delegate_ios_unittest.mm
+++ b/components/signin/internal/identity_manager/profile_oauth2_token_service_delegate_ios_unittest.mm
@@ -11,7 +11,6 @@
 #include "components/prefs/testing_pref_service.h"
 #include "components/signin/internal/identity_manager/account_tracker_service.h"
 #include "components/signin/internal/identity_manager/profile_oauth2_token_service_observer.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/test_signin_client.h"
 #include "components/signin/public/identity_manager/ios/fake_device_accounts_provider.h"
 #include "google_apis/gaia/gaia_urls.h"
--- a/components/signin/public/base/BUILD.gn
+++ b/components/signin/public/base/BUILD.gn
@@ -31,8 +31,6 @@ static_library("base") {
     "signin_client.h",
     "signin_metrics.cc",
     "signin_metrics.h",
-    "signin_pref_names.cc",
-    "signin_pref_names.h",
     "signin_switches.cc",
     "signin_switches.h",
   ]
--- a/components/signin/public/base/device_id_helper.cc
+++ b/components/signin/public/base/device_id_helper.cc
@@ -8,7 +8,6 @@
 #include "base/guid.h"
 #include "base/logging.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/base/signin_switches.h"
 
 namespace signin {
@@ -16,19 +15,12 @@ namespace signin {
 #if !defined(OS_CHROMEOS)
 
 std::string GetSigninScopedDeviceId(PrefService* prefs) {
-  if (base::CommandLine::ForCurrentProcess()->HasSwitch(
-          switches::kDisableSigninScopedDeviceId)) {
-    return std::string();
-  }
-
-  return GetOrCreateScopedDeviceId(prefs);
+  return std::string();
 }
 
 std::string RecreateSigninScopedDeviceId(PrefService* prefs) {
   std::string signin_scoped_device_id = GenerateSigninScopedDeviceId();
   DCHECK(!signin_scoped_device_id.empty());
-  prefs->SetString(prefs::kGoogleServicesSigninScopedDeviceId,
-                   signin_scoped_device_id);
   return signin_scoped_device_id;
 }
 
@@ -37,13 +29,7 @@ std::string GenerateSigninScopedDeviceId
 }
 
 std::string GetOrCreateScopedDeviceId(PrefService* prefs) {
-  std::string signin_scoped_device_id =
-      prefs->GetString(prefs::kGoogleServicesSigninScopedDeviceId);
-  if (signin_scoped_device_id.empty()) {
-    // If device_id doesn't exist then generate new and save in prefs.
-    signin_scoped_device_id = RecreateSigninScopedDeviceId(prefs);
-  }
-  return signin_scoped_device_id;
+  return RecreateSigninScopedDeviceId(prefs);
 }
 
 #endif
--- a/components/signin/public/base/device_id_helper_unittest.cc
+++ b/components/signin/public/base/device_id_helper_unittest.cc
@@ -7,7 +7,6 @@
 #include <string>
 
 #include "build/build_config.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
@@ -23,40 +22,23 @@ TEST(DeviceIdHelper, GenerateSigninScope
 
 TEST(DeviceIdHelper, RecreateSigninScopedDeviceId) {
   sync_preferences::TestingPrefServiceSyncable prefs;
-  prefs.registry()->RegisterStringPref(
-      prefs::kGoogleServicesSigninScopedDeviceId, std::string());
-  ASSERT_TRUE(
-      prefs.GetString(prefs::kGoogleServicesSigninScopedDeviceId).empty());
 
   std::string device_id_1 = RecreateSigninScopedDeviceId(&prefs);
   EXPECT_FALSE(device_id_1.empty());
-  EXPECT_EQ(device_id_1,
-            prefs.GetString(prefs::kGoogleServicesSigninScopedDeviceId));
 
   std::string device_id_2 = RecreateSigninScopedDeviceId(&prefs);
   EXPECT_FALSE(device_id_2.empty());
   EXPECT_NE(device_id_1, device_id_2);
-  EXPECT_EQ(device_id_2,
-            prefs.GetString(prefs::kGoogleServicesSigninScopedDeviceId));
 }
 
 TEST(DeviceIdHelper, GetOrCreateScopedDeviceId) {
   sync_preferences::TestingPrefServiceSyncable prefs;
-  prefs.registry()->RegisterStringPref(
-      prefs::kGoogleServicesSigninScopedDeviceId, std::string());
-
-  ASSERT_TRUE(
-      prefs.GetString(prefs::kGoogleServicesSigninScopedDeviceId).empty());
 
   std::string device_id_1 = GetOrCreateScopedDeviceId(&prefs);
   EXPECT_FALSE(device_id_1.empty());
-  EXPECT_EQ(device_id_1,
-            prefs.GetString(prefs::kGoogleServicesSigninScopedDeviceId));
 
   std::string device_id_2 = GetOrCreateScopedDeviceId(&prefs);
   EXPECT_EQ(device_id_1, device_id_2);
-  EXPECT_EQ(device_id_2,
-            prefs.GetString(prefs::kGoogleServicesSigninScopedDeviceId));
 }
 
 #endif
--- a/components/signin/public/identity_manager/identity_utils.cc
+++ b/components/signin/public/identity_manager/identity_utils.cc
@@ -9,7 +9,6 @@
 #include "base/strings/string_util.h"
 #include "base/strings/utf_string_conversions.h"
 #include "components/prefs/pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "third_party/icu/source/i18n/unicode/regex.h"
 
 namespace signin {
@@ -54,8 +53,7 @@ bool IsUsernameAllowedByPattern(base::St
 
 bool IsUsernameAllowedByPatternFromPrefs(const PrefService* prefs,
                                          const std::string& username) {
-  return IsUsernameAllowedByPattern(
-      username, prefs->GetString(prefs::kGoogleServicesUsernamePattern));
+  return true;
 }
 
 }  // namespace signin
--- a/components/signin/public/identity_manager/identity_utils_unittest.cc
+++ b/components/signin/public/identity_manager/identity_utils_unittest.cc
@@ -7,7 +7,6 @@
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/pref_service.h"
 #include "components/prefs/testing_pref_service.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
 namespace {
--- a/components/signin/public/identity_manager/primary_account_mutator_unittest.cc
+++ b/components/signin/public/identity_manager/primary_account_mutator_unittest.cc
@@ -10,7 +10,6 @@
 #include "base/scoped_observer.h"
 #include "base/test/task_environment.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_test_environment.h"
 #include "components/signin/public/identity_manager/identity_test_utils.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
--- a/tools/metrics/histograms/enums.xml
+++ b/tools/metrics/histograms/enums.xml
@@ -62697,7 +62697,6 @@ Full version information for the fingerp
   <int value="3" label="kRestoreOnStartup"/>
   <int value="4" label="kURLsToRestoreOnStartup"/>
   <int value="5" label="extensions::pref_names::kExtensions"/>
-  <int value="6" label="kGoogleServicesLastUsername"/>
   <int value="7" label="kSearchProviderOverrides"/>
   <int value="8" label="kDefaultSearchProviderSearchURL (Obsolete 12/2016)"/>
   <int value="9" label="kDefaultSearchProviderKeyword (Obsolete 12/2016)"/>
@@ -62712,10 +62711,7 @@ Full version information for the fingerp
   <int value="18" label="kSafeBrowsingIncidentsSent"/>
   <int value="19" label="kSwReporterPromptVersion"/>
   <int value="20" label="kSwReporterPromptReason"/>
-  <int value="21" label="kGoogleServicesUsername (Obsolete 9/2019)"/>
   <int value="22" label="kSwReporterPromptSeed"/>
-  <int value="23" label="kGoogleServicesAccountId"/>
-  <int value="24" label="kGoogleServicesLastAccountId"/>
   <int value="25" label="kSettingsResetPromptPromptWave"/>
   <int value="26" label="kSettingsResetPromptLastTriggeredForDefaultSearch"/>
   <int value="27" label="kSettingsResetPromptLastTriggeredForStartupUrls"/>
