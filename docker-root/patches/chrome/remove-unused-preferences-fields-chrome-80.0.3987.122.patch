--- chromium-80.0.3987.122.orig/chrome/browser/chrome_content_browser_client.cc
+++ chromium-80.0.3987.122/chrome/browser/chrome_content_browser_client.cc
@@ -2069,13 +2069,9 @@ void ChromeContentBrowserClient::AppendE
         }
       }
 
-      // Disable client-side phishing detection in the renderer if it is
-      // disabled in the Profile preferences or the browser process.
-      if (!prefs->GetBoolean(prefs::kSafeBrowsingEnabled) ||
-          true) {
-        command_line->AppendSwitch(
-            switches::kDisableClientSidePhishingDetection);
-      }
+      // Disable client-side phishing detection in the renderer
+      command_line->AppendSwitch(
+          switches::kDisableClientSidePhishingDetection);
 
       if (prefs->GetBoolean(prefs::kPrintPreviewDisabled))
         command_line->AppendSwitch(switches::kDisablePrintPreview);
@@ -4901,19 +4897,7 @@ ChromeContentBrowserClient::GetSafeBrows
     content::ResourceContext* resource_context) {
   DCHECK_CURRENTLY_ON(BrowserThread::IO);
 
-  ProfileIOData* io_data = ProfileIOData::FromResourceContext(resource_context);
-  if (!io_data->safe_browsing_enabled()->GetValue())
-    return nullptr;
-
-  // |safe_browsing_service_| may be unavailable in tests.
-  if (safe_browsing_service_ && !safe_browsing_url_checker_delegate_) {
-    safe_browsing_url_checker_delegate_ =
-        base::MakeRefCounted<safe_browsing::UrlCheckerDelegateImpl>(
-            safe_browsing_service_->database_manager(),
-            safe_browsing_service_->ui_manager());
-  }
-
-  return safe_browsing_url_checker_delegate_;
+  return nullptr;
 }
 
 base::Optional<std::string>
--- chromium-80.0.3987.122.orig/chrome/browser/download/download_item_model.cc
+++ chromium-80.0.3987.122/chrome/browser/download/download_item_model.cc
@@ -23,9 +23,6 @@
 #include "chrome/browser/download/download_stats.h"
 #include "chrome/browser/download/offline_item_utils.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/download_protection/download_feedback_service.h"
-#include "chrome/common/safe_browsing/download_file_types.pb.h"
-#include "chrome/common/safe_browsing/file_type_policies.h"
 #include "chrome/grit/chromium_strings.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/download/public/common/download_danger_type.h"
@@ -43,7 +40,6 @@
 
 using base::TimeDelta;
 using download::DownloadItem;
-using safe_browsing::DownloadFileType;
 
 namespace {
 
@@ -284,14 +280,7 @@ bool DownloadItemModel::IsMalicious() co
 }
 
 bool DownloadItemModel::ShouldAllowDownloadFeedback() const {
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-  if (!IsDangerous())
-    return false;
-  return safe_browsing::DownloadFeedbackService::IsEnabledForDownload(
-      *download_);
-#else
   return false;
-#endif
 }
 
 bool DownloadItemModel::ShouldRemoveFromShelfWhenComplete() const {
--- chromium-80.0.3987.122.orig/chrome/browser/native_file_system/chrome_native_file_system_permission_context.cc
+++ chromium-80.0.3987.122/chrome/browser/native_file_system/chrome_native_file_system_permission_context.cc
@@ -18,7 +18,6 @@
 #include "chrome/browser/native_file_system/native_file_system_permission_context_factory.h"
 #include "chrome/browser/native_file_system/native_file_system_permission_request_manager.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_service.h"
 #include "chrome/browser/sessions/session_tab_helper.h"
 #include "chrome/browser/ui/browser_dialogs.h"
 #include "chrome/common/chrome_paths.h"
@@ -328,78 +327,6 @@ class ReadPermissionGrantImpl
   PermissionStatus status_ = PermissionStatus::GRANTED;
 };
 
-void DoSafeBrowsingCheckOnUIThread(
-    int process_id,
-    int frame_id,
-    std::unique_ptr<content::NativeFileSystemWriteItem> item,
-    safe_browsing::CheckDownloadCallback callback) {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-
-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-
-  if (!sb_service || !sb_service->download_protection_service() ||
-      !sb_service->download_protection_service()->enabled()) {
-    std::move(callback).Run(safe_browsing::DownloadCheckResult::UNKNOWN);
-    return;
-  }
-
-  if (!item->browser_context) {
-    content::RenderProcessHost* rph =
-        content::RenderProcessHost::FromID(process_id);
-    if (!rph) {
-      std::move(callback).Run(safe_browsing::DownloadCheckResult::UNKNOWN);
-      return;
-    }
-    item->browser_context = rph->GetBrowserContext();
-  }
-
-  if (!item->web_contents) {
-    content::RenderFrameHost* rfh =
-        content::RenderFrameHost::FromID(process_id, frame_id);
-    if (rfh)
-      item->web_contents = content::WebContents::FromRenderFrameHost(rfh);
-  }
-
-  sb_service->download_protection_service()->CheckNativeFileSystemWrite(
-      std::move(item), std::move(callback));
-}
-
-ChromeNativeFileSystemPermissionContext::AfterWriteCheckResult
-InterpretSafeBrowsingResult(safe_browsing::DownloadCheckResult result) {
-  using Result = safe_browsing::DownloadCheckResult;
-  switch (result) {
-    // Only allow downloads that are marked as SAFE or UNKNOWN by SafeBrowsing.
-    // All other types are going to be blocked. UNKNOWN could be the result of a
-    // failed safe browsing ping.
-    case Result::UNKNOWN:
-    case Result::SAFE:
-    case Result::WHITELISTED_BY_POLICY:
-      return ChromeNativeFileSystemPermissionContext::AfterWriteCheckResult::
-          kAllow;
-
-    case Result::DANGEROUS:
-    case Result::UNCOMMON:
-    case Result::DANGEROUS_HOST:
-    case Result::POTENTIALLY_UNWANTED:
-    case Result::BLOCKED_PASSWORD_PROTECTED:
-    case Result::BLOCKED_TOO_LARGE:
-      return ChromeNativeFileSystemPermissionContext::AfterWriteCheckResult::
-          kBlock;
-
-    // This shouldn't be returned for Native File System write checks.
-    case Result::ASYNC_SCANNING:
-    case Result::SENSITIVE_CONTENT_WARNING:
-    case Result::SENSITIVE_CONTENT_BLOCK:
-    case Result::DEEP_SCANNED_SAFE:
-      NOTREACHED();
-      return ChromeNativeFileSystemPermissionContext::AfterWriteCheckResult::
-          kAllow;
-  }
-  NOTREACHED();
-  return ChromeNativeFileSystemPermissionContext::AfterWriteCheckResult::kBlock;
-}
-
 }  // namespace
 
 ChromeNativeFileSystemPermissionContext::Grants::Grants() = default;
@@ -680,29 +607,6 @@ void ChromeNativeFileSystemPermissionCon
                      process_id, frame_id, std::move(callback)));
 }
 
-void ChromeNativeFileSystemPermissionContext::PerformAfterWriteChecks(
-    std::unique_ptr<content::NativeFileSystemWriteItem> item,
-    int process_id,
-    int frame_id,
-    base::OnceCallback<void(AfterWriteCheckResult)> callback) {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  base::PostTask(
-      FROM_HERE, {content::BrowserThread::UI},
-      base::BindOnce(
-          &DoSafeBrowsingCheckOnUIThread, process_id, frame_id, std::move(item),
-          base::BindOnce(
-              [](scoped_refptr<base::TaskRunner> task_runner,
-                 base::OnceCallback<void(AfterWriteCheckResult result)>
-                     callback,
-                 safe_browsing::DownloadCheckResult result) {
-                task_runner->PostTask(
-                    FROM_HERE,
-                    base::BindOnce(std::move(callback),
-                                   InterpretSafeBrowsingResult(result)));
-              },
-              base::SequencedTaskRunnerHandle::Get(), std::move(callback))));
-}
-
 ChromeNativeFileSystemPermissionContext::Grants
 ChromeNativeFileSystemPermissionContext::GetPermissionGrants(
     const url::Origin& origin,
--- chromium-80.0.3987.122.orig/chrome/browser/native_file_system/chrome_native_file_system_permission_context.h
+++ chromium-80.0.3987.122/chrome/browser/native_file_system/chrome_native_file_system_permission_context.h
@@ -152,12 +152,6 @@ class ChromeNativeFileSystemPermissionCo
       int frame_id,
       base::OnceCallback<void(PermissionStatus)> callback) override;
 
-  void PerformAfterWriteChecks(
-      std::unique_ptr<content::NativeFileSystemWriteItem> item,
-      int process_id,
-      int frame_id,
-      base::OnceCallback<void(AfterWriteCheckResult)> callback) override;
-
   // Returns a snapshot of the currently granted permissions.
   // TODO(https://crbug.com/984769): Eliminate process_id and frame_id from this
   // method when grants stop being scoped to a frame.
--- chromium-80.0.3987.122.orig/chrome/browser/password_manager/chrome_password_manager_client.cc
+++ chromium-80.0.3987.122/chrome/browser/password_manager/chrome_password_manager_client.cc
@@ -25,7 +25,6 @@
 #include "chrome/browser/password_manager/password_store_factory.h"
 #include "chrome/browser/prerender/prerender_contents.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/chrome_password_protection_service.h"
 #include "chrome/browser/signin/identity_manager_factory.h"
 #include "chrome/browser/site_isolation/site_isolation_policy.h"
 #include "chrome/browser/sync/profile_sync_service_factory.h"
@@ -93,11 +92,11 @@
 #if BUILDFLAG(FULL_SAFE_BROWSING)
 #include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
 #include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
+#endif
 #include "ui/base/clipboard/clipboard.h"
 #include "ui/events/keycodes/keyboard_codes.h"
 #include "services/service_manager/public/cpp/connector.h"
 #include "third_party/blink/public/mojom/clipboard/clipboard.mojom.h"
-#endif
 
 #if defined(OS_ANDROID)
 #include "chrome/browser/android/tab_android.h"
@@ -543,6 +542,7 @@ bool ChromePasswordManagerClient::IsIsol
   return SiteIsolationPolicy::IsIsolationForPasswordSitesEnabled();
 }
 
+#if BUILDFLAG(FULL_SAFE_BROWSING)
 #if defined(ON_FOCUS_PING_ENABLED) || \
     defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
 safe_browsing::PasswordProtectionService*
@@ -565,6 +565,7 @@ void ChromePasswordManagerClient::CheckS
   }
 }
 #endif  // defined(ON_FOCUS_PING_ENABLED)
+#endif // BUILDFLAG(FULL_SAFE_BROWSING)
 
 #if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
 void ChromePasswordManagerClient::CheckProtectedPasswordEntry(
@@ -572,24 +573,11 @@ void ChromePasswordManagerClient::CheckP
     const std::string& username,
     const std::vector<std::string>& matching_domains,
     bool password_field_exists) {
-  safe_browsing::PasswordProtectionService* pps =
-      GetPasswordProtectionService();
-  if (!pps)
-    return;
-
-  pps->MaybeStartProtectedPasswordEntryRequest(
-      web_contents(), web_contents()->GetLastCommittedURL(), username,
-      password_type, matching_domains, password_field_exists);
 }
 #endif  // defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
 
 #if defined(SYNC_PASSWORD_REUSE_WARNING_ENABLED)
 void ChromePasswordManagerClient::LogPasswordReuseDetectedEvent() {
-  safe_browsing::PasswordProtectionService* pps =
-      GetPasswordProtectionService();
-  if (pps) {
-    pps->MaybeLogPasswordReuseDetectedEvent(web_contents());
-  }
 }
 #endif  // defined(SYNC_PASSWORD_REUSE_WARNING_ENABLED)
 
@@ -713,7 +701,9 @@ void ChromePasswordManagerClient::OnInpu
   if (key_event.windows_key_code == (ui::VKEY_V & 0x1f)) {
     OnPaste();
   } else {
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
     password_reuse_detection_manager_.OnKeyPressedCommitted(key_event.text);
+#endif  // defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   }
 #endif  // defined(OS_ANDROID)
 }
@@ -839,9 +829,11 @@ void ChromePasswordManagerClient::OnPast
   base::string16 text;
   clipboard->ReadText(ui::ClipboardBuffer::kCopyPaste, &text);
   was_on_paste_called_ = true;
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   password_reuse_detection_manager_.OnPaste(std::move(text));
+#endif  // defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
 }
-#endif
+#endif  // !defined(OS_ANDROID)
 
 gfx::RectF ChromePasswordManagerClient::GetBoundsInScreenSpace(
     const gfx::RectF& bounds) {
--- chromium-80.0.3987.122.orig/chrome/browser/password_manager/chrome_password_manager_client.h
+++ chromium-80.0.3987.122/chrome/browser/password_manager/chrome_password_manager_client.h
@@ -184,7 +184,7 @@ class ChromePasswordManagerClient
   void OnImeFinishComposingTextEvent() override;
 #endif  // defined(OS_ANDROID)
 
-#if defined(ON_FOCUS_PING_ENABLED)
+#if defined(ON_FOCUS_PING_ENABLED) && BUILDFLAG(FULL_SAFE_BROWSING)
   void CheckSafeBrowsingReputation(const GURL& form_action,
                                    const GURL& frame_url) override;
   safe_browsing::PasswordProtectionService* GetPasswordProtectionService()
--- chromium-80.0.3987.122.orig/chrome/browser/permissions/contextual_notification_permission_ui_selector.cc
+++ chromium-80.0.3987.122/chrome/browser/permissions/contextual_notification_permission_ui_selector.cc
@@ -18,9 +18,7 @@
 #include "chrome/browser/permissions/permission_request.h"
 #include "chrome/browser/permissions/quiet_notification_permission_ui_config.h"
 #include "chrome/browser/permissions/quiet_notification_permission_ui_state.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/common/chrome_features.h"
-#include "components/safe_browsing/db/database_manager.h"
 
 namespace {
 
@@ -111,50 +109,14 @@ void ContextualNotificationPermissionUiS
     Notify(UiToUse::kNormalUi, base::nullopt);
     return;
   }
-
-  // Even if the quiet UI is enabled on all sites, the crowd deny trigger
-  // condition must be evaluated, so that the less prominent UI and the correct
-  // strings are shown on origins with crowd deny activated.
-  EvaluateCrowdDenyTrigger(url::Origin::Create(request->GetOrigin()));
 }
 
 void ContextualNotificationPermissionUiSelector::Cancel() {
-  // The computation either finishes synchronously above, or is waiting on the
-  // Safe Browsing check.
-  safe_browsing_request_.reset();
 }
 
 ContextualNotificationPermissionUiSelector::
     ~ContextualNotificationPermissionUiSelector() = default;
 
-void ContextualNotificationPermissionUiSelector::EvaluateCrowdDenyTrigger(
-    url::Origin origin) {
-  if (!QuietNotificationPermissionUiConfig::IsCrowdDenyTriggeringEnabled()) {
-    OnCrowdDenyTriggerEvaluated(UiToUse::kNormalUi);
-    return;
-  }
-
-  base::Optional<UiToUse> ui_to_use = GetUiToUseBasedOnSiteReputation(
-      CrowdDenyPreloadData::GetInstance()->GetReputationDataForSite(origin));
-  if (!ui_to_use || *ui_to_use == UiToUse::kNormalUi) {
-    OnCrowdDenyTriggerEvaluated(UiToUse::kNormalUi);
-    return;
-  }
-
-  // PreloadData suggests a spammy site, ping safe browsing to verify.
-  DCHECK(!safe_browsing_request_);
-  DCHECK(g_browser_process->safe_browsing_service());
-
-  // It is fine to use base::Unretained() here, as |safe_browsing_request_|
-  // guarantees not to fire the callback after its destruction.
-  safe_browsing_request_.emplace(
-      g_browser_process->safe_browsing_service()->database_manager(),
-      base::DefaultClock::GetInstance(), origin,
-      base::BindOnce(&ContextualNotificationPermissionUiSelector::
-                         OnSafeBrowsingVerdictReceived,
-                     base::Unretained(this)));
-}
-
 void ContextualNotificationPermissionUiSelector::OnSafeBrowsingVerdictReceived(
     CrowdDenySafeBrowsingRequest::Verdict verdict) {
   DCHECK(safe_browsing_request_);
--- chromium-80.0.3987.122.orig/chrome/browser/ui/tab_contents/chrome_web_contents_view_handle_drop.cc
+++ chromium-80.0.3987.122/chrome/browser/ui/tab_contents/chrome_web_contents_view_handle_drop.cc
@@ -37,35 +37,4 @@ void HandleOnPerformDrop(
     content::WebContents* web_contents,
     const content::DropData& drop_data,
     content::WebContentsViewDelegate::DropCompletionCallback callback) {
-  safe_browsing::DeepScanningDialogDelegate::Data data;
-  Profile* profile =
-      Profile::FromBrowserContext(web_contents->GetBrowserContext());
-  if (!safe_browsing::DeepScanningDialogDelegate::IsEnabled(
-          profile, web_contents->GetLastCommittedURL(), &data)) {
-    std::move(callback).Run(
-        content::WebContentsViewDelegate::DropCompletionResult::kContinue);
-    return;
-  }
-
-  // Collect the data that needs to be scanned.
-  if (!drop_data.url_title.empty())
-    data.text.push_back(drop_data.url_title);
-  if (!drop_data.text.is_null())
-    data.text.push_back(drop_data.text.string());
-  if (!drop_data.html.is_null())
-    data.text.push_back(drop_data.html.string());
-  if (!drop_data.file_contents.empty())
-    data.text.push_back(base::UTF8ToUTF16(drop_data.file_contents));
-
-  for (const auto& file : drop_data.filenames)
-    data.paths.push_back(file.path);
-
-  // TODO(crbug.com/1008040): how to handle drop_data.file_system_files?
-  // These are URLs that use the filesystem: schema.  Support for this API
-  // is unclear.
-
-  safe_browsing::DeepScanningDialogDelegate::ShowForWebContents(
-      web_contents, std::move(data),
-      base::BindOnce(&DeepScanCompletionCallback, std::move(callback)),
-      safe_browsing::DeepScanAccessPoint::DRAG_AND_DROP);
 }
--- chromium-80.0.3987.122.orig/chrome/browser/ui/views/download/download_item_view.cc
+++ chromium-80.0.3987.122/chrome/browser/ui/views/download/download_item_view.cc
@@ -1127,6 +1127,7 @@ void DownloadItemView::ShowDeepScanningD
           },
           base::Unretained(this))));
 
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   int delay_delivery = g_browser_process->local_state()->GetInteger(
       prefs::kDelayDeliveryUntilVerdict);
   if (delay_delivery != safe_browsing::DELAY_DOWNLOADS &&
@@ -1138,6 +1139,9 @@ void DownloadItemView::ShowDeepScanningD
   } else {
     open_button_->SetEnabled(false);
   }
+#else
+  open_button_->SetEnabled(false);
+#endif  // BUILDFLAG(FULL_SAFE_BROWSING)
 
   file_name_label_->SetVisible(false);
   status_label_->SetVisible(false);
@@ -1445,7 +1449,9 @@ base::string16 DownloadItemView::ElidedF
 }
 
 void DownloadItemView::OpenDownloadDuringAsyncScanning() {
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   model_->CompleteSafeBrowsingScan();
+#endif
   should_open_while_scanning_ = true;
 }
 
--- chromium-80.0.3987.122.orig/chrome/browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog.cc
+++ chromium-80.0.3987.122/chrome/browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog.cc
@@ -159,10 +159,7 @@ PasswordReuseModalWarningDialog::Passwor
         placeholder_offsets);
   } else {
     views::Label* message_body_label = CreateMessageBodyLabel(
-        service_
-            ? service_->GetWarningDetailText(password_type,
-                                             &placeholder_offsets)
-            : l10n_util::GetStringUTF16(IDS_PAGE_INFO_CHANGE_PASSWORD_DETAILS));
+        l10n_util::GetStringUTF16(IDS_PAGE_INFO_CHANGE_PASSWORD_DETAILS));
     CreateGaiaPasswordReuseModalWarningDialog(message_body_label);
   }
 }
--- chromium-80.0.3987.122.orig/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
+++ chromium-80.0.3987.122/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
@@ -78,8 +78,6 @@
 #include "components/nacl/common/buildflags.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/web_ui/constants.h"
-#include "components/safe_browsing/web_ui/safe_browsing_ui.h"
 #include "components/security_interstitials/content/connection_help_ui.h"
 #include "components/security_interstitials/content/known_interception_disclosure_ui.h"
 #include "components/security_interstitials/content/urls.h"
@@ -414,8 +412,6 @@ WebUIFactoryFunction GetWebUIFactoryFunc
     return &NewWebUI<PredictorsUI>;
   if (url.host_piece() == chrome::kChromeUIQuotaInternalsHost)
     return &NewWebUI<QuotaInternalsUI>;
-  if (url.host_piece() == safe_browsing::kChromeUISafeBrowsingHost)
-    return &NewWebUI<safe_browsing::SafeBrowsingUI>;
   if (url.host_piece() == chrome::kChromeUISignInInternalsHost)
     return &NewWebUI<SignInInternalsUI>;
   if (url.host_piece() == chrome::kChromeUISuggestionsHost)
--- chromium-80.0.3987.122.orig/components/password_manager/content/browser/content_password_manager_driver.cc
+++ chromium-80.0.3987.122/components/password_manager/content/browser/content_password_manager_driver.cc
@@ -310,7 +310,7 @@ void ContentPasswordManagerDriver::ShowT
 void ContentPasswordManagerDriver::CheckSafeBrowsingReputation(
     const GURL& form_action,
     const GURL& frame_url) {
-#if defined(ON_FOCUS_PING_ENABLED)
+#if defined(ON_FOCUS_PING_ENABLED) && BUILDFLAG(FULL_SAFE_BROWSING)
   client_->CheckSafeBrowsingReputation(form_action, frame_url);
 #endif
 }
--- chromium-80.0.3987.122.orig/components/password_manager/core/browser/password_manager_client.h
+++ chromium-80.0.3987.122/components/password_manager/core/browser/password_manager_client.h
@@ -279,7 +279,7 @@ class PasswordManagerClient {
   // Returns the current best guess as to the page's display language.
   virtual std::string GetPageLanguage() const;
 
-#if defined(ON_FOCUS_PING_ENABLED)
+#if defined(ON_FOCUS_PING_ENABLED) && BUILDFLAG(FULL_SAFE_BROWSING)
   // Return the PasswordProtectionService associated with this instance.
   virtual safe_browsing::PasswordProtectionService*
   GetPasswordProtectionService() const = 0;
--- chromium-80.0.3987.122.orig/components/safe_browsing/common/safe_browsing.mojom
+++ chromium-80.0.3987.122/components/safe_browsing/common/safe_browsing.mojom
@@ -127,7 +127,6 @@ enum PhishingDetectorResult {
   INVALID_SCORE = 4,
 };
 
-[EnableIf=full_safe_browsing]
 interface PhishingDetector {
   // Tells the renderer to begin phishing detection for the given toplevel URL
   // which it has started loading. Returns the serialized request proto and a
--- chromium-80.0.3987.122.orig/content/browser/native_file_system/native_file_system_file_writer_impl.cc
+++ chromium-80.0.3987.122/content/browser/native_file_system/native_file_system_file_writer_impl.cc
@@ -93,8 +93,7 @@ NativeFileSystemFileWriterImpl::NativeFi
                                  url,
                                  handle_state,
                                  /*is_directory=*/false),
-      swap_url_(swap_url),
-      has_transient_user_activation_(has_transient_user_activation) {
+      swap_url_(swap_url) {
   DCHECK_EQ(swap_url.type(), url.type());
 }
 
@@ -302,50 +301,7 @@ void NativeFileSystemFileWriterImpl::Clo
   // swap file even if the writer was destroyed at that point.
   state_ = State::kClosePending;
 
-  if (!RequireAfterWriteCheck() || !manager()->permission_context()) {
-    DidPassAfterWriteCheck(std::move(callback));
-    return;
-  }
-
-  ComputeHashForSwapFile(base::BindOnce(
-      &NativeFileSystemFileWriterImpl::DoAfterWriteCheck,
-      weak_factory_.GetWeakPtr(), swap_url().path(), std::move(callback)));
-}
-
-// static
-void NativeFileSystemFileWriterImpl::DoAfterWriteCheck(
-    base::WeakPtr<NativeFileSystemFileWriterImpl> file_writer,
-    const base::FilePath& swap_path,
-    NativeFileSystemFileWriterImpl::CloseCallback callback,
-    base::File::Error hash_result,
-    const std::string& hash,
-    int64_t size) {
-  if (!file_writer || hash_result != base::File::FILE_OK) {
-    // If writer was deleted, or calculating the hash failed try deleting the
-    // swap file and invoke the callback.
-    base::PostTask(FROM_HERE, {base::ThreadPool(), base::MayBlock()},
-                   base::BindOnce(base::IgnoreResult(&base::DeleteFile),
-                                  swap_path, /*recursive=*/false));
-    std::move(callback).Run(native_file_system_error::FromStatus(
-        NativeFileSystemStatus::kOperationAborted,
-        "Failed to perform Safe Browsing check."));
-    return;
-  }
-
-  DCHECK_CALLED_ON_VALID_SEQUENCE(file_writer->sequence_checker_);
-
-  auto item = std::make_unique<NativeFileSystemWriteItem>();
-  item->target_file_path = file_writer->url().path();
-  item->full_path = file_writer->swap_url().path();
-  item->sha256_hash = hash;
-  item->size = size;
-  item->frame_url = file_writer->context().url;
-  item->has_user_gesture = file_writer->has_transient_user_activation_;
-  file_writer->manager()->permission_context()->PerformAfterWriteChecks(
-      std::move(item), file_writer->context().process_id,
-      file_writer->context().frame_id,
-      base::BindOnce(&NativeFileSystemFileWriterImpl::DidAfterWriteCheck,
-                     file_writer, swap_path, std::move(callback)));
+  DidPassAfterWriteCheck(std::move(callback));
 }
 
 // static
--- chromium-80.0.3987.122.orig/content/browser/native_file_system/native_file_system_file_writer_impl.h
+++ chromium-80.0.3987.122/content/browser/native_file_system/native_file_system_file_writer_impl.h
@@ -80,15 +80,8 @@ class CONTENT_EXPORT NativeFileSystemFil
                 bool complete);
   void TruncateImpl(uint64_t length, TruncateCallback callback);
   void CloseImpl(CloseCallback callback);
-  // The following two methods are static, because they need to be invoked to
+  // The following method is static because they need to be invoked to
   // perform cleanup even if the writer was deleted before they were invoked.
-  static void DoAfterWriteCheck(
-      base::WeakPtr<NativeFileSystemFileWriterImpl> file_writer,
-      const base::FilePath& swap_path,
-      NativeFileSystemFileWriterImpl::CloseCallback callback,
-      base::File::Error hash_result,
-      const std::string& hash,
-      int64_t size);
   static void DidAfterWriteCheck(
       base::WeakPtr<NativeFileSystemFileWriterImpl> file_writer,
       const base::FilePath& swap_path,
@@ -101,7 +94,7 @@ class CONTENT_EXPORT NativeFileSystemFil
 
   // After write checks only apply to native local paths.
   bool RequireAfterWriteCheck() const {
-    return url().type() == storage::kFileSystemTypeNativeLocal;
+    return false;
   }
 
   // Quarantine checks only apply to native local paths.
@@ -141,10 +134,6 @@ class CONTENT_EXPORT NativeFileSystemFil
 
   bool skip_quarantine_check_for_testing_ = false;
 
-  // Keeps track of user activation state at creation time for after write
-  // checks.
-  bool has_transient_user_activation_ = false;
-
   base::WeakPtr<NativeFileSystemHandleBase> AsWeakPtr() override;
 
   base::WeakPtrFactory<NativeFileSystemFileWriterImpl> weak_factory_{this};
--- chromium-80.0.3987.122.orig/content/public/browser/native_file_system_permission_context.h
+++ chromium-80.0.3987.122/content/public/browser/native_file_system_permission_context.h
@@ -95,13 +95,6 @@ class NativeFileSystemPermissionContext
       base::OnceCallback<void(SensitiveDirectoryResult)> callback) = 0;
 
   enum class AfterWriteCheckResult { kAllow, kBlock };
-  // Runs a recently finished write operation through checks such as malware
-  // or other security checks to determine if the write should be allowed.
-  virtual void PerformAfterWriteChecks(
-      std::unique_ptr<NativeFileSystemWriteItem> item,
-      int process_id,
-      int frame_id,
-      base::OnceCallback<void(AfterWriteCheckResult)> callback) = 0;
 
   // Returns whether the given |origin| is allowed to ask for write access.
   // This is used to block save file dialogs from being shown
