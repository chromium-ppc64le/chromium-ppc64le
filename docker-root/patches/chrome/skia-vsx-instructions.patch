--- chromium-79.0.3945.36.orig/third_party/skia/BUILD.gn
+++ chromium-79.0.3945.36/third_party/skia/BUILD.gn
@@ -53,6 +53,9 @@ config("skia_public") {
   } else if (skia_gl_standard == "webgl") {
     defines += [ "SK_ASSUME_WEBGL=1" ]
   }
+  if (current_cpu == "ppc64") {
+    cflags = [ "-mcpu=power9", "-mtune=power9" ]
+  }
 }

 # Skia internal APIs, used by Skia itself and a few test tools.
@@ -77,12 +80,20 @@ config("skia_private") {
   if (skia_use_angle) {
     defines += [ "SK_ANGLE" ]
   }
+
+  if (current_cpu == "ppc64") {
+    cflags = [ "-mcpu=power9", "-mtune=power9" ]
+  }
 }

 # Any code that's linked into Skia-the-library should use this config via += skia_library_configs.
 config("skia_library") {
   visibility = [ ":*" ]
   defines = [ "SKIA_IMPLEMENTATION=1" ]
+
+  if (current_cpu == "ppc64") {
+    cflags = [ "-mcpu=power9", "-mtune=power9" ]
+  }
 }

 skia_library_configs = [
@@ -117,7 +128,8 @@ template("opts") {
 is_x86 = current_cpu == "x64" || current_cpu == "x86"

 opts("none") {
-  enabled = !is_x86 && current_cpu != "arm" && current_cpu != "arm64"
+  enabled = !is_x86 && current_cpu != "arm" && current_cpu != "arm64" &&
+      current_cpu != "ppc64"
   sources = skia_opts.none_sources
   cflags = []
 }
@@ -200,6 +212,12 @@ opts("hsw") {
   }
 }

+opts("vsx") {
+  enabled = current_cpu == "ppc64"
+  sources = skia_opts.vsx_sources
+  cflags = [ "-mcpu=power9", "-mtune=power9" ]
+}
+
 # Any feature of Skia that requires third-party code should be optional and use this template.
 template("optional") {
   visibility = [ ":*" ]
@@ -867,6 +885,7 @@ component("skia") {
     ":sse41",
     ":sse42",
     ":ssse3",
+    ":vsx",
     ":webp",
     ":wuffs",
     ":xml",
@@ -1060,6 +1079,7 @@ static_library("pathkit") {
     ":sse41",
     ":sse42",
     ":ssse3",
+    ":vsx",
   ]

   # This file (and all GN files in Skia) are designed to work with an
--- chromium-79.0.3945.36.orig/third_party/skia/gn/shared_sources.gni
+++ chromium-79.0.3945.36/third_party/skia/gn/shared_sources.gni
@@ -26,4 +26,5 @@ skia_opts = {
   sse42_sources = sse42
   avx_sources = avx
   hsw_sources = hsw
+  vsx_sources = ssse3
 }
--- chromium-79.0.3945.36.orig/third_party/skia/include/core/SkPreConfig.h
+++ chromium-79.0.3945.36/third_party/skia/include/core/SkPreConfig.h
@@ -175,6 +175,26 @@
     #define SK_ARM_HAS_CRC32
 #endif

+//////////////////////////////////////////////////////////////////////
+// PPC defines
+
+#if defined(__powerpc64__) || defined(__PPC64__)
+    #define SK_CPU_PPC64
+#endif
+
+#if defined(__VSX__)
+    #define SK_PPC64_HAS_VSX
+    #if defined(_ARCH_PWR8)
+        #define SK_CPU_SSE_LEVEL    SK_CPU_SSE_LEVEL_SSSE3
+        #ifndef NO_WARN_X86_INTRINSICS
+            #define NO_WARN_X86_INTRINSICS
+        #endif
+        #if defined(__clang__)
+            #define SK_PPC64_CLANG_MFPPR_BUG
+        #endif
+    #endif
+#endif
+
 //////////////////////////////////////////////////////////////////////

 #if !defined(SKIA_IMPLEMENTATION)
--- chromium-79.0.3945.36.orig/third_party/skia/include/private/SkVx.h
+++ chromium-79.0.3945.36/third_party/skia/include/private/SkVx.h
@@ -32,6 +32,11 @@
     #include <immintrin.h>
 #elif defined(__ARM_NEON)
     #include <arm_neon.h>
+#elif defined(_ARCH_PWR8)
+    #ifndef NO_WARN_X86_INTRINSICS
+        #define NO_WARN_X86_INTRINSICS
+    #endif
+    #include <emmintrin.h>
 #endif

 #if !defined(__clang__) && defined(__GNUC__) && defined(__mips64)
@@ -466,7 +471,7 @@ static inline Vec<N,uint8_t> approx_scale(const Vec<N,uint8_t>& x, const Vec<N,u

     // Platform-specific specializations and overloads can now drop in here.

-    #if defined(__SSE__)
+    #if defined(__SSE__) || defined(_ARCH_PWR8)
         static inline Vec<4,float> sqrt(const Vec<4,float>& x) {
             return bit_pun<Vec<4,float>>(_mm_sqrt_ps(bit_pun<__m128>(x)));
         }
@@ -496,7 +501,7 @@ static inline Vec<N,uint8_t> approx_scale(const Vec<N,uint8_t>& x, const Vec<N,u
                                                        bit_pun<__m128>(t),
                                                        bit_pun<__m128>(c)));
         }
-    #elif defined(__SSE__)
+    #elif defined(__SSE__) || defined(_ARCH_PWR8)
         static inline Vec<4,float> if_then_else(const Vec<4,int  >& c,
                                                 const Vec<4,float>& t,
                                                 const Vec<4,float>& e) {
--- chromium-79.0.3945.36.orig/third_party/skia/src/core/SkSpinlock.cpp
+++ chromium-79.0.3945.36/third_party/skia/src/core/SkSpinlock.cpp
@@ -31,7 +31,8 @@
 #endif

 // Renamed from "pause" to avoid conflict with function defined in unistd.h
-#if SK_CPU_SSE_LEVEL >= SK_CPU_SSE_LEVEL_SSE2
+#if SK_CPU_SSE_LEVEL >= SK_CPU_SSE_LEVEL_SSE2 && \
+    !defined(SK_PPC64_CLANG_MFPPR_BUG)
     #include <emmintrin.h>
     static void do_pause() { _mm_pause(); }
 #else
--- chromium-79.0.3945.36.orig/third_party/skia/src/opts/SkBitmapProcState_opts.h
+++ chromium-79.0.3945.36/third_party/skia/src/opts/SkBitmapProcState_opts.h
@@ -21,7 +21,9 @@
 // The rest are scattershot at the moment but I want to get them
 // all migrated to be normal code inside SkBitmapProcState.cpp.

-#if SK_CPU_SSE_LEVEL >= SK_CPU_SSE_LEVEL_SSE2
+#if defined(SK_CPU_PPC64)
+    #include <emmintrin.h>
+#elif SK_CPU_SSE_LEVEL >= SK_CPU_SSE_LEVEL_SSE2
     #include <immintrin.h>
 #elif defined(SK_ARM_HAS_NEON)
     #include <arm_neon.h>
--- chromium-79.0.3945.36.orig/third_party/skia/src/opts/SkBlitRow_opts.h
+++ chromium-79.0.3945.36/third_party/skia/src/opts/SkBlitRow_opts.h
@@ -60,7 +60,11 @@
     }

 #elif SK_CPU_SSE_LEVEL >= SK_CPU_SSE_LEVEL_SSE2
+#if defined(SK_CPU_PPC64)
+    #include <emmintrin.h>
+#else
     #include <immintrin.h>
+#endif

     static inline __m128i SkPMSrcOver_SSE2(const __m128i& src, const __m128i& dst) {
         auto SkAlphaMulQ_SSE2 = [](const __m128i& c, const __m128i& scale) {
--- chromium-79.0.3945.36.orig/third_party/skia/src/opts/SkRasterPipeline_opts.h
+++ chromium-79.0.3945.36/third_party/skia/src/opts/SkRasterPipeline_opts.h
@@ -104,6 +104,8 @@ struct Ctx {
     #include <math.h>
 #elif defined(JUMPER_IS_NEON)
     #include <arm_neon.h>
+#elif defined(SK_CPU_PPC64)
+    #include <emmintrin.h>
 #else
     #include <immintrin.h>
 #endif
@@ -1922,7 +1924,10 @@ STAGE(to_srgb, Ctx::None) {
         U32 sign;
         l = strip_sign(l, &sign);
         // We tweak c and d for each instruction set to make sure fn(1) is exactly 1.
-    #if defined(JUMPER_IS_AVX512)
+    #if defined(SK_CPU_PPC64)
+        const float c = 1.130002250000f,
+                    d = 0.141380243004f;
+    #elif defined(JUMPER_IS_AVX512)
         const float c = 1.130026340485f,
                     d = 0.141387879848f;
     #elif defined(JUMPER_IS_SSE2) || defined(JUMPER_IS_SSE41) || \
--- chromium-79.0.3945.36.orig/third_party/skia/src/opts/SkSwizzler_opts.h
+++ chromium-79.0.3945.36/third_party/skia/src/opts/SkSwizzler_opts.h
@@ -12,7 +12,9 @@

 #include <utility>

-#if SK_CPU_SSE_LEVEL >= SK_CPU_SSE_LEVEL_SSSE3
+#if defined(SK_CPU_PPC64)
+    #include <emmintrin.h>
+#elif SK_CPU_SSE_LEVEL >= SK_CPU_SSE_LEVEL_SSSE3
     #include <immintrin.h>
 #elif defined(SK_ARM_HAS_NEON)
     #include <arm_neon.h>

